interface ConversionOptions {
    /**
     * If converter should convert rules with all modifier
     */
    ignoreAllModifier?: boolean;
}
/**
 * Rule converter class
 */
export declare class RuleConverter {
    private static CSS_RULE_REPLACE_PATTERN;
    private static FIRST_PARTY_REGEX;
    private static FIRST_PARTY_REPLACEMENT;
    private static XHR_REGEX;
    private static XHR_REPLACEMENT;
    private static CSS_REGEX;
    private static CSS_REPLACEMENT;
    private static FRAME_REGEX;
    private static FRAME_REPLACEMENT;
    private static SCRIPT_HAS_TEXT_REGEX;
    private static SCRIPT_HAS_TEXT_REGEX_SHORT;
    private static TAG_CONTENT_VALUE_REGEX;
    private static ATTRIBUTE_REGEX;
    private static CSS_COMBINATORS_REGEX;
    private static SCRIPT_HAS_TEXT_REPLACEMENT;
    private static THIRD_PARTY_1P_3P_REGEX;
    private static THIRD_PARTY_1P_REPLACEMENT;
    private static THIRD_PARTY_3P_REPLACEMENT;
    private static GHIDE_REGEX;
    private static GENERICHIDE;
    private static SHIDE_REGEX;
    private static SPECIFICHIDE;
    private static EHIDE_REGEX;
    private static ELEMHIDE;
    private static QUERY_PRUNE_REGEX;
    private static REMOVE_PARAM_REPLACEMENT;
    private static DOC_REGEX;
    private static DOC_REPLACEMENT;
    private static UBO_RESPONSE_HEADER;
    private static UBO_RESPONSE_HEADER_REGEX;
    private static UBO_RESPONSE_HEADER_EXCEPTION_REGEX;
    private static UBO_RESPONSE_HEADER_REPLACEMENT;
    private static UBO_MATCHES_PATH;
    private static UBO_REVERSED_MATCHES_PATH;
    /**
     * Rule masks
     */
    private static MASK_ELEMENT_HIDING;
    private static UBO_HTML_RULE_MASK;
    private static MASK_ELEMENT_HIDING_EXCEPTION;
    private static MASK_CSS;
    private static MASK_CSS_EXCEPTION;
    private static MASK_CSS_EXTENDED_CSS_RULE;
    private static MASK_CSS_EXCEPTION_EXTENDED_CSS_RULE;
    private static MASK_CSS_INJECT_EXTENDED_CSS_RULE;
    private static MASK_CSS_EXCEPTION_INJECT_EXTENDED_CSS_RULE;
    private static REMOVE_RULE_PATTERN;
    private static REMOVE_RULE_REPLACER;
    /**
     * Converts rules text
     *
     * @param rulesText
     * @param conversionOptions
     */
    static convertRules(rulesText: string, conversionOptions?: ConversionOptions): string;
    /**
     * Convert external scriptlet rule to AdGuard scriptlet syntax
     *
     * @param rule
     * @param conversionOptions
     */
    static convertRule(rule: string, conversionOptions?: ConversionOptions): string[];
    /**
     * Validates scriptlet rule
     *
     * @param ruleText
     */
    private static isValidScriptletRule;
    /**
     * Converts UBO Script rule
     *
     * @param {string} ruleText rule text
     * @returns {string} converted rule
     */
    private static convertScriptHasTextToScriptTagContent;
    /**
     * Converts UBO and ABP redirect rules to AdGuard redirect rules
     * @param rule
     * @return {string} convertedRule
     */
    private static convertUboAndAbpRedirectsToAdg;
    /**
     * Converts rule options
     * @param rule
     * @param conversionOptions
     * @private
     */
    private static convertOptions;
    /**
     * Converts ubo syntax comments (rules starting with #)
     * Note: It's not possible to detect 100% cause rules starting with ## are valid elemhide rules
     *
     * @param rule
     * @return {string}
     */
    private static convertUboComments;
    /**
     * Executes rule css conversion
     *
     * @param rule
     * @param parts
     * @param ruleMark
     */
    private static executeConversion;
    /**
     * Adds colon to the pseudo elements written with one colon (:before, :after);
     * e.g.
     *  "hotline.ua##.reset-scroll:before" -> "hotline.ua##.reset-scroll::before"
     * @param rule
     * @private
     */
    private static convertPseudoElements;
    /**
     * Converts CSS injection
     * example.com##h1:style(background-color: blue !important)
     * into
     * example.com#$#h1 { background-color: blue !important }
     * <p>
     * OR (for exceptions):
     * example.com#@#h1:style(background-color: blue !important)
     * into
     * example.com#@$#h1 { background-color: blue !important }
     *
     * @param {string} rule
     * @return {string} convertedRule
     */
    private static convertCssInjection;
    /**
     * Converts ':remove()' rule to AdGuard extended css rule
     * example.com###banner:remove() -> example.com#$?##banner { remove: true; }
     * @param {string} rule
     * @return {string} rule or converted rule
     */
    private static convertRemoveRule;
    /**
     * Converts '^responseheader()' rule to AdGuard's $removeheader modifier
     * "ya.ru##^responseheader(header-name)" -> "||ya.ru^$removeheader=header-name"
     *
     * @param {string} ruleText
     * @return {string} ruleText or converted rule
     */
    private static convertUboResponseHeaderRule;
    /**
     * Converts cosmetic 'matches-path()' rule to AdGuard's $path modifier
     * "ya.ru##:matches-path(/page) p" -> "[$path=/page]ya.ru##p"
     *
     * @param {string} ruleText
     * @return {string} ruleText or converted rule
     */
    private static convertUboMatchesPathRule;
    /**
     * Some options have aliases and will be replaced:
     *
     * $first-party -> $~third-party
     * $xhr -> $xmlhttprequest
     * $css -> $stylesheet
     * $frame -> $subdocument
     * $1p -> $~third-party
     * $3p -> $third-party
     * ghide -> generichide
     * ehide -> elemhide
     * doc -> document
     * queryprune -> removeparam
     */
    private static OPTIONS_ALIASES;
    /**
     * Replaces the options in aliases array
     *
     * @param {string} rule
     * @return {string} convertedRule
     */
    private static replaceOptions;
}
export {};
