import { IndexedRule } from '../../rules/rule';
import { ILineReader } from '../reader/line-reader';
import { ScannerType } from './scanner-type';
/**
 * Scanner configuration
 *
 * @param scannerType type of scanner
 * @param ignoreCosmetic if true, cosmetic rules will be ignored
 * @param ignoreJS if true, javascript cosmetic rules will be ignored
 * @param ignoreUnsafe if true, some `unsafe` rules will be ignored, $removeheader rules as an example
 */
export interface RuleScannerConfiguration {
    /**
     * Scanner type
     */
    scannerType: ScannerType;
    /**
     * if true, cosmetic rules will be ignored
     */
    ignoreCosmetic?: boolean;
    /**
     * if true, javascript cosmetic rules will be ignored
     */
    ignoreJS?: boolean;
    /**
     * if true, some `unsafe` rules will be ignored, $removeheader rules as an example
     */
    ignoreUnsafe?: boolean;
}
/**
 * Rule scanner implements an interface for reading filtering rules.
 */
export declare class RuleScanner {
    /**
     * Filter list ID
     */
    private readonly listId;
    /**
     * True if we should ignore cosmetic rules
     */
    private readonly ignoreCosmetic;
    /**
     * True if we should ignore javascript cosmetic rules
     */
    private readonly ignoreJS;
    /**
     * True if we should ignore unsafe rules, like $removeheader
     */
    private readonly ignoreUnsafe;
    /**
     * True if we should ignore network rules
     */
    private ignoreNetwork;
    /**
     * True if we should ignore host rules
     */
    private ignoreHost;
    /**
     * Reader object
     */
    private readonly reader;
    /**
     *  Current rule
     */
    private currentRule;
    /**
     * Index of the beginning of the current rule
     */
    private currentRuleIndex;
    /**
     * Current position in the reader
     */
    private currentPos;
    /**
     * NewRuleScanner returns a new RuleScanner to read from r.
     *
     * @param reader source of the filtering rules
     * @param listId filter list ID
     * @param configuration config object
     */
    constructor(reader: ILineReader, listId: number, configuration: RuleScannerConfiguration);
    /**
     * Scan advances the RuleScanner to the next rule, which will then be available
     * through the Rule method.
     *
     * @return false when the scan stops, either by
     * reaching the end of the input or an error.
    */
    scan(): boolean;
    /**
     * @return the most recent rule generated by a call to Scan, and the index of this rule's text.
     */
    getRule(): IndexedRule | null;
    /**
     * Reads the next line and returns it
     *
     * @return next line string or null
     */
    private readNextLine;
    /**
     * Checks if the rule should be ignored by this scanner
     *
     * @param rule to check
     * @return is rule ignored
     */
    private isIgnored;
}
