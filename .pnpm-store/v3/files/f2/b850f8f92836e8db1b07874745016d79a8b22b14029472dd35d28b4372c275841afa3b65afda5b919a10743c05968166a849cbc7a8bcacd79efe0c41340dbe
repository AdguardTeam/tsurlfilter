{"version":3,"file":"requireDescriptionCompleteSentence.js","names":["otherDescriptiveTags","Set","extractParagraphs","text","split","extractSentences","abbreviationsRegex","txt","replace","sentenceEndGrouping","puncts","matchAll","map","sentence","idx","test","isNewLinePrecededByAPeriod","lastLineEndsSentence","lines","some","line","isCapitalized","str","toUpperCase","isTable","charAt","capitalize","slice","validateDescription","description","reportOrig","jsdocNode","sourceCode","tag","newlineBeforeCapsAssumesBadSentenceEnd","paragraphs","paragraph","parIdx","sentences","fix","fixer","getText","pop","RegExp","escapeStringRegexp","filter","sentence_","beginning","reg","_$0","$1","replaceText","report","msg","tagObj","source","number","column","paragraphNoAbbreviations","iterateJsdoc","context","jsdoc","utils","options","abbreviations","length","abbreviation","join","getDescription","forEachPreferredTag","matchingJsdocTag","desc","name","getTagDescription","trim","tagsWithNames","getTagsByType","tags","tagsWithoutNames","filterTags","tagName","has","hasOptionTag","trimEnd","iterateAllJsdocs","meta","docs","url","fixable","schema","additionalProperties","properties","items","type"],"sources":["../../src/rules/requireDescriptionCompleteSentence.js"],"sourcesContent":["import escapeStringRegexp from 'escape-string-regexp';\nimport iterateJsdoc from '../iterateJsdoc';\n\nconst otherDescriptiveTags = new Set([\n  // 'copyright' and 'see' might be good addition, but as the former may be\n  //   sensitive text, and the latter may have just a link, they are not\n  //   included by default\n  'summary', 'file', 'fileoverview', 'overview', 'classdesc', 'todo',\n  'deprecated', 'throws', 'exception', 'yields', 'yield',\n]);\n\nconst extractParagraphs = (text) => {\n  return text.split(/(?<![;:])\\n\\n/u);\n};\n\nconst extractSentences = (text, abbreviationsRegex) => {\n  const txt = text\n\n    // Remove all {} tags.\n    .replace(/\\{[\\s\\S]*?\\}\\s*/gu, '')\n\n    // Remove custom abbreviations\n    .replace(abbreviationsRegex, '');\n\n  const sentenceEndGrouping = /([.?!])(?:\\s+|$)/ug;\n\n  const puncts = txt.matchAll(sentenceEndGrouping);\n\n  return txt\n\n    .split(/[.?!](?:\\s+|$)/u)\n\n    // Re-add the dot.\n    .map((sentence, idx) => {\n      return /^\\s*$/u.test(sentence) ? sentence : `${sentence}${puncts[idx] || ''}`;\n    });\n};\n\nconst isNewLinePrecededByAPeriod = (text) => {\n  let lastLineEndsSentence;\n\n  const lines = text.split('\\n');\n\n  return !lines.some((line) => {\n    if (lastLineEndsSentence === false && /^[A-Z][a-z]/u.test(line)) {\n      return true;\n    }\n\n    lastLineEndsSentence = /[.:?!|]$/u.test(line);\n\n    return false;\n  });\n};\n\nconst isCapitalized = (str) => {\n  return str[0] === str[0].toUpperCase();\n};\n\nconst isTable = (str) => {\n  return str.charAt() === '|';\n};\n\nconst capitalize = (str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n\nconst validateDescription = (\n  description, reportOrig, jsdocNode, abbreviationsRegex,\n  sourceCode, tag, newlineBeforeCapsAssumesBadSentenceEnd,\n) => {\n  if (!description || (/^\\n+$/u).test(description)) {\n    return false;\n  }\n\n  const paragraphs = extractParagraphs(description);\n\n  return paragraphs.some((paragraph, parIdx) => {\n    const sentences = extractSentences(paragraph, abbreviationsRegex);\n\n    const fix = (fixer) => {\n      let text = sourceCode.getText(jsdocNode);\n\n      if (!/[.:?!]$/u.test(paragraph)) {\n        const line = paragraph.split('\\n').pop();\n\n        text = text.replace(new RegExp(`${escapeStringRegexp(line)}$`, 'mu'), `${line}.`);\n      }\n\n      for (const sentence of sentences.filter((sentence_) => {\n        return !(/^\\s*$/u).test(sentence_) && !isCapitalized(sentence_) &&\n          !isTable(sentence_);\n      })) {\n        const beginning = sentence.split('\\n')[0];\n\n        if (tag.tag) {\n          const reg = new RegExp(`(@${escapeStringRegexp(tag.tag)}.*)${escapeStringRegexp(beginning)}`, 'u');\n\n          text = text.replace(reg, (_$0, $1) => {\n            return $1 + capitalize(beginning);\n          });\n        } else {\n          text = text.replace(new RegExp('((?:[.!?]|\\\\*|\\\\})\\\\s*)' + escapeStringRegexp(beginning), 'u'), '$1' + capitalize(beginning));\n        }\n      }\n\n      return fixer.replaceText(jsdocNode, text);\n    };\n\n    const report = (msg, fixer, tagObj) => {\n      if ('line' in tagObj) {\n        tagObj.line += parIdx * 2;\n      } else {\n        tagObj.source[0].number += parIdx * 2;\n      }\n\n      // Avoid errors if old column doesn't exist here\n      tagObj.column = 0;\n      reportOrig(msg, fixer, tagObj);\n    };\n\n    if (sentences.some((sentence) => {\n      return !(/^\\s*$/u).test(sentence) && !isCapitalized(sentence) && !isTable(sentence);\n    })) {\n      report('Sentence should start with an uppercase character.', fix, tag);\n    }\n\n    const paragraphNoAbbreviations = paragraph.replace(abbreviationsRegex, '');\n\n    if (!/[.!?|]\\s*$/u.test(paragraphNoAbbreviations)) {\n      report('Sentence must end with a period.', fix, tag);\n\n      return true;\n    }\n\n    if (newlineBeforeCapsAssumesBadSentenceEnd && !isNewLinePrecededByAPeriod(paragraphNoAbbreviations)) {\n      report('A line of text is started with an uppercase character, but preceding line does not end the sentence.', null, tag);\n\n      return true;\n    }\n\n    return false;\n  });\n};\n\nexport default iterateJsdoc(({\n  sourceCode,\n  context,\n  jsdoc,\n  report,\n  jsdocNode,\n  utils,\n}) => {\n  const options = context.options[0] || {};\n  const {\n    abbreviations = [],\n    newlineBeforeCapsAssumesBadSentenceEnd = false,\n  } = options;\n\n  const abbreviationsRegex = abbreviations.length ?\n    new RegExp('\\\\b' + abbreviations.map((abbreviation) => {\n      return escapeStringRegexp(abbreviation.replace(/\\.$/ug, '') + '.');\n    }).join('|') + '(?:$|\\\\s)', 'gu') :\n    '';\n\n  const {\n    description,\n  } = utils.getDescription();\n\n  if (validateDescription(description, report, jsdocNode, abbreviationsRegex, sourceCode, {\n    line: jsdoc.source[0].number + 1,\n  }, newlineBeforeCapsAssumesBadSentenceEnd)) {\n    return;\n  }\n\n  utils.forEachPreferredTag('description', (matchingJsdocTag) => {\n    const desc = `${matchingJsdocTag.name} ${utils.getTagDescription(matchingJsdocTag)}`.trim();\n    validateDescription(desc, report, jsdocNode, abbreviationsRegex, sourceCode, matchingJsdocTag, newlineBeforeCapsAssumesBadSentenceEnd);\n  }, true);\n\n  const {\n    tagsWithNames,\n  } = utils.getTagsByType(jsdoc.tags);\n  const tagsWithoutNames = utils.filterTags(({\n    tag: tagName,\n  }) => {\n    return otherDescriptiveTags.has(tagName) ||\n      utils.hasOptionTag(tagName) && !tagsWithNames.some(({\n        tag,\n      }) => {\n        // If user accidentally adds tags with names (or like `returns`\n        //  get parsed as having names), do not add to this list\n        return tag === tagName;\n      });\n  });\n\n  tagsWithNames.some((tag) => {\n    const desc = utils.getTagDescription(tag).replace(/^- /u, '').trimEnd();\n\n    return validateDescription(desc, report, jsdocNode, abbreviationsRegex, sourceCode, tag, newlineBeforeCapsAssumesBadSentenceEnd);\n  });\n\n  tagsWithoutNames.some((tag) => {\n    const desc = `${tag.name} ${utils.getTagDescription(tag)}`.trim();\n\n    return validateDescription(desc, report, jsdocNode, abbreviationsRegex, sourceCode, tag, newlineBeforeCapsAssumesBadSentenceEnd);\n  });\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    docs: {\n      description: 'Requires that block description, explicit `@description`, and `@param`/`@returns` tag descriptions are written in complete sentences.',\n      url: 'https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-require-description-complete-sentence',\n    },\n    fixable: 'code',\n    schema: [\n      {\n        additionalProperties: false,\n        properties: {\n          abbreviations: {\n            items: {\n              type: 'string',\n            },\n            type: 'array',\n          },\n          newlineBeforeCapsAssumesBadSentenceEnd: {\n            type: 'boolean',\n          },\n          tags: {\n            items: {\n              type: 'string',\n            },\n            type: 'array',\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'suggestion',\n  },\n});\n"],"mappings":"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"}