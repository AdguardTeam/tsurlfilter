{"version":3,"file":"checkTypes.js","names":["strictNativeTypes","adjustNames","type","preferred","isGenericMatch","typeNodeName","node","parentNode","ret","meta","brackets","dot","dotBracketEnd","match","slice","length","bracketEnd","endsWith","value","replace","iterateJsdoc","jsdocNode","sourceCode","report","utils","settings","context","jsdocTagsWithPossibleType","filterTags","tag","tagMightHaveTypePosition","preferredTypes","preferredTypesOriginal","structuredTags","mode","injectObjectPreferredTypes","Object","noDefaults","unifyParentAndChildTypeChecks","exemptTagContexts","options","getPreferredTypeInfo","_type","property","hasMatchingPreferredType","typeName","isNameOfGeneric","undefined","checkPostFixes","some","checkPostFix","directNameMatch","values","includes","unifiedSyntaxParentMatch","checkNativeTypes","invalidTypes","changedPreferred","strictNativeType","elements","left","toLowerCase","push","getInvalidTypes","tagName","types","preferredSetting","replacement","message","reportSettings","entries","typs","Array","isArray","jsdocTag","typeAst","tryParse","parse","traverse","fixedType","stringify","fix","fixer","replaceText","getText","badType","preferredType","tagValue","name","JSON","iterateAllJsdocs","docs","description","url","fixable","schema","additionalProperties","properties","items","oneOf"],"sources":["../../src/rules/checkTypes.js"],"sourcesContent":["import {\n  parse,\n  stringify,\n  traverse,\n  tryParse,\n} from '@es-joy/jsdoccomment';\nimport iterateJsdoc from '../iterateJsdoc';\n\nconst strictNativeTypes = [\n  'undefined',\n  'null',\n  'boolean',\n  'number',\n  'bigint',\n  'string',\n  'symbol',\n  'object',\n  'Array',\n  'Function',\n  'Date',\n  'RegExp',\n];\n\n/**\n * Adjusts the parent type node `meta` for generic matches (or type node\n * `type` for `JsdocTypeAny`) and sets the type node `value`.\n *\n * @param {string} type The actual type\n * @param {string} preferred The preferred type\n * @param {boolean} isGenericMatch\n * @param {string} typeNodeName\n * @param {import('jsdoc-type-pratt-parser/dist/src/index.d.ts').NonTerminalResult} node\n * @param {import('jsdoc-type-pratt-parser/dist/src/index.d.ts').NonTerminalResult} parentNode\n * @returns {void}\n */\nconst adjustNames = (type, preferred, isGenericMatch, typeNodeName, node, parentNode) => {\n  let ret = preferred;\n  if (isGenericMatch) {\n    if (preferred === '[]') {\n      parentNode.meta.brackets = 'square';\n      parentNode.meta.dot = false;\n      ret = 'Array';\n    } else {\n      const dotBracketEnd = preferred.match(/\\.(?:<>)?$/u);\n      if (dotBracketEnd) {\n        parentNode.meta.brackets = 'angle';\n        parentNode.meta.dot = true;\n        ret = preferred.slice(0, -dotBracketEnd[0].length);\n      } else {\n        const bracketEnd = preferred.endsWith('<>');\n        if (bracketEnd) {\n          parentNode.meta.brackets = 'angle';\n          parentNode.meta.dot = false;\n          ret = preferred.slice(0, -2);\n        } else if (\n          parentNode.meta.brackets === 'square' &&\n          (typeNodeName === '[]' || typeNodeName === 'Array')\n        ) {\n          parentNode.meta.brackets = 'angle';\n          parentNode.meta.dot = false;\n        }\n      }\n    }\n  } else if (type === 'JsdocTypeAny') {\n    node.type = 'JsdocTypeName';\n  }\n\n  node.value = ret.replace(/(?:\\.|<>|\\.<>|\\[\\])$/u, '');\n\n  // For bare pseudo-types like `<>`\n  if (!ret) {\n    node.value = typeNodeName;\n  }\n};\n\nexport default iterateJsdoc(({\n  jsdocNode,\n  sourceCode,\n  report,\n  utils,\n  settings,\n  context,\n}) => {\n  const jsdocTagsWithPossibleType = utils.filterTags((tag) => {\n    return utils.tagMightHaveTypePosition(tag.tag);\n  });\n\n  const {\n    preferredTypes: preferredTypesOriginal,\n    structuredTags,\n    mode,\n  } = settings;\n\n  const injectObjectPreferredTypes = !('Object' in preferredTypesOriginal ||\n    'object' in preferredTypesOriginal ||\n    'object.<>' in preferredTypesOriginal ||\n    'Object.<>' in preferredTypesOriginal ||\n    'object<>' in preferredTypesOriginal);\n\n  const preferredTypes = {\n    ...injectObjectPreferredTypes ? {\n      Object: 'object',\n      'object.<>': 'Object<>',\n      'Object.<>': 'Object<>',\n      'object<>': 'Object<>',\n    } : {},\n    ...preferredTypesOriginal,\n  };\n\n  const {\n    noDefaults,\n    unifyParentAndChildTypeChecks,\n    exemptTagContexts = [],\n  } = context.options[0] || {};\n\n  /**\n   * Gets information about the preferred type: whether there is a matching\n   * preferred type, what the type is, and whether it is a match to a generic.\n   *\n   * @param {string} _type Not currently in use\n   * @param {string} typeNodeName\n   * @param {import('jsdoc-type-pratt-parser/dist/src/index.d.ts').NonTerminalResult} parentNode\n   * @param {string} property\n   * @returns {[hasMatchingPreferredType: boolean, typeName: string, isGenericMatch: boolean]}\n   */\n  const getPreferredTypeInfo = (_type, typeNodeName, parentNode, property) => {\n    let hasMatchingPreferredType = false;\n    let isGenericMatch = false;\n    let typeName = typeNodeName;\n\n    const isNameOfGeneric = parentNode !== undefined && parentNode.type === 'JsdocTypeGeneric' && property === 'left';\n    if (unifyParentAndChildTypeChecks || isNameOfGeneric) {\n      const brackets = parentNode?.meta?.brackets;\n      const dot = parentNode?.meta?.dot;\n\n      if (brackets === 'angle') {\n        const checkPostFixes = dot ? [\n          '.', '.<>',\n        ] : [\n          '<>',\n        ];\n        isGenericMatch = checkPostFixes.some((checkPostFix) => {\n          if (preferredTypes?.[typeNodeName + checkPostFix] !== undefined) {\n            typeName += checkPostFix;\n\n            return true;\n          }\n\n          return false;\n        });\n      }\n\n      if (!isGenericMatch && property) {\n        const checkPostFixes = dot ? [\n          '.', '.<>',\n        ] : [\n          brackets === 'angle' ? '<>' : '[]',\n        ];\n\n        isGenericMatch = checkPostFixes.some((checkPostFix) => {\n          if (preferredTypes?.[checkPostFix] !== undefined) {\n            typeName = checkPostFix;\n\n            return true;\n          }\n\n          return false;\n        });\n      }\n    }\n\n    const directNameMatch = preferredTypes?.[typeNodeName] !== undefined &&\n      !Object.values(preferredTypes).includes(typeNodeName);\n    const unifiedSyntaxParentMatch = property && directNameMatch && unifyParentAndChildTypeChecks;\n    isGenericMatch = isGenericMatch || unifiedSyntaxParentMatch;\n\n    hasMatchingPreferredType = isGenericMatch ||\n      directNameMatch && !property;\n\n    return [\n      hasMatchingPreferredType, typeName, isGenericMatch,\n    ];\n  };\n\n  /**\n   * Iterates strict types to see if any should be added to `invalidTypes` (and\n   * the the relevant strict type returned as the new preferred type).\n   *\n   * @param {string} typeNodeName\n   * @param {string} preferred\n   * @param {import('jsdoc-type-pratt-parser/dist/src/index.d.ts').NonTerminalResult} parentNode\n   * @param {string[]} invalidTypes\n   * @returns {string} The `preferred` type string, optionally changed\n   */\n  const checkNativeTypes = (typeNodeName, preferred, parentNode, invalidTypes) => {\n    let changedPreferred = preferred;\n    for (const strictNativeType of strictNativeTypes) {\n      if (\n        strictNativeType === 'object' &&\n        (\n          // This is not set to remap with exact type match (e.g.,\n          //   `object: 'Object'`), so can ignore (including if circular)\n          !preferredTypes?.[typeNodeName] ||\n          // Although present on `preferredTypes` for remapping, this is a\n          //   parent object without a parent match (and not\n          //   `unifyParentAndChildTypeChecks`) and we don't want\n          //   `object<>` given TypeScript issue https://github.com/microsoft/TypeScript/issues/20555\n          parentNode?.elements?.length && (\n            parentNode?.left?.type === 'JsdocTypeName' &&\n            parentNode?.left?.value === 'Object'\n          )\n        )\n      ) {\n        continue;\n      }\n\n      if (strictNativeType !== typeNodeName &&\n        strictNativeType.toLowerCase() === typeNodeName.toLowerCase() &&\n\n        // Don't report if user has own map for a strict native type\n        (!preferredTypes || preferredTypes?.[strictNativeType] === undefined)\n      ) {\n        changedPreferred = strictNativeType;\n        invalidTypes.push([\n          typeNodeName, changedPreferred,\n        ]);\n        break;\n      }\n    }\n\n    return changedPreferred;\n  };\n\n  /**\n   * Collect invalid type info.\n   *\n   * @param {string} type\n   * @param {string} value\n   * @param {string} tagName\n   * @param {string} property\n   * @param {import('jsdoc-type-pratt-parser/dist/src/index.d.ts').NonTerminalResult} node\n   * @param {import('jsdoc-type-pratt-parser/dist/src/index.d.ts').NonTerminalResult} parentNode\n   * @param {string[]} invalidTypes\n   * @returns {void}\n   */\n  const getInvalidTypes = (type, value, tagName, property, node, parentNode, invalidTypes) => {\n    let typeNodeName = type === 'JsdocTypeAny' ? '*' : value;\n\n    const [\n      hasMatchingPreferredType,\n      typeName,\n      isGenericMatch,\n    ] = getPreferredTypeInfo(type, typeNodeName, parentNode, property);\n\n    let preferred;\n    let types;\n    if (hasMatchingPreferredType) {\n      const preferredSetting = preferredTypes[typeName];\n      typeNodeName = typeName === '[]' ? typeName : typeNodeName;\n\n      if (!preferredSetting) {\n        invalidTypes.push([\n          typeNodeName,\n        ]);\n      } else if (typeof preferredSetting === 'string') {\n        preferred = preferredSetting;\n        invalidTypes.push([\n          typeNodeName, preferred,\n        ]);\n      } else if (typeof preferredSetting === 'object') {\n        preferred = preferredSetting?.replacement;\n        invalidTypes.push([\n          typeNodeName,\n          preferred,\n          preferredSetting?.message,\n        ]);\n      } else {\n        utils.reportSettings(\n          'Invalid `settings.jsdoc.preferredTypes`. Values must be falsy, a string, or an object.',\n        );\n\n        return;\n      }\n    } else if (Object.entries(structuredTags).some(([\n      tag,\n      {\n        type: typs,\n      },\n    ]) => {\n      types = typs;\n\n      return tag === tagName &&\n        Array.isArray(types) &&\n        !types.includes(typeNodeName);\n    })) {\n      invalidTypes.push([\n        typeNodeName, types,\n      ]);\n    } else if (!noDefaults && type === 'JsdocTypeName') {\n      preferred = checkNativeTypes(typeNodeName, preferred, parentNode, invalidTypes);\n    }\n\n    // For fixer\n    if (preferred) {\n      adjustNames(type, preferred, isGenericMatch, typeNodeName, node, parentNode);\n    }\n  };\n\n  for (const jsdocTag of jsdocTagsWithPossibleType) {\n    const invalidTypes = [];\n    let typeAst;\n\n    try {\n      typeAst = mode === 'permissive' ? tryParse(jsdocTag.type) : parse(jsdocTag.type, mode);\n    } catch {\n      continue;\n    }\n\n    const tagName = jsdocTag.tag;\n\n    traverse(typeAst, (node, parentNode, property) => {\n      const {\n        type,\n        value,\n      } = node;\n      if (![\n        'JsdocTypeName', 'JsdocTypeAny',\n      ].includes(type)) {\n        return;\n      }\n\n      getInvalidTypes(type, value, tagName, property, node, parentNode, invalidTypes);\n    });\n\n    if (invalidTypes.length) {\n      const fixedType = stringify(typeAst);\n\n      /**\n       * @param {any} fixer The ESLint fixer\n       * @returns {string}\n       */\n      const fix = (fixer) => {\n        return fixer.replaceText(\n          jsdocNode,\n          sourceCode.getText(jsdocNode).replace(\n            `{${jsdocTag.type}}`,\n            `{${fixedType}}`,\n          ),\n        );\n      };\n\n      for (const [\n        badType,\n        preferredType = '',\n        message,\n      ] of invalidTypes) {\n        const tagValue = jsdocTag.name ? ` \"${jsdocTag.name}\"` : '';\n        if (exemptTagContexts.some(({\n          tag,\n          types,\n        }) => {\n          return tag === tagName &&\n            (types === true || types.includes(jsdocTag.type));\n        })) {\n          continue;\n        }\n\n        report(\n          message ||\n            `Invalid JSDoc @${tagName}${tagValue} type \"${badType}\"` +\n            (preferredType ? '; ' : '.') +\n            (preferredType ? `prefer: ${JSON.stringify(preferredType)}.` : ''),\n          preferredType ? fix : null,\n          jsdocTag,\n          message ? {\n            tagName,\n            tagValue,\n          } : null,\n        );\n      }\n    }\n  }\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    docs: {\n      description: 'Reports invalid types.',\n      url: 'https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-check-types',\n    },\n    fixable: 'code',\n    schema: [\n      {\n        additionalProperties: false,\n        properties: {\n          exemptTagContexts: {\n            items: {\n              additionalProperties: false,\n              properties: {\n                tag: {\n                  type: 'string',\n                },\n                types: {\n                  oneOf: [\n                    {\n                      type: 'boolean',\n                    },\n                    {\n                      items: {\n                        type: 'string',\n                      },\n                      type: 'array',\n                    },\n                  ],\n                },\n              },\n              type: 'object',\n            },\n            type: 'array',\n          },\n          noDefaults: {\n            type: 'boolean',\n          },\n          unifyParentAndChildTypeChecks: {\n            type: 'boolean',\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'suggestion',\n  },\n});\n"],"mappings":"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"}