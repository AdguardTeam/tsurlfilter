{"version":3,"file":"noUndefinedTypes.js","names":["extraTypes","typescriptGlobals","stripPseudoTypes","str","replace","iterateJsdoc","context","node","report","settings","sourceCode","utils","scopeManager","globalScope","definedTypes","options","definedPreferredTypes","preferredTypes","structuredTags","mode","Object","keys","length","values","map","preferredType","undefined","reportSettings","replacement","filter","typedefDeclarations","getAllComments","comment","test","value","commentNode","parseComment","flatMap","doc","tags","tag","isNamepathDefiningTag","name","ancestorNodes","currentNode","parent","push","getTemplateTags","ancestorNode","getJSDocComment","jsdoc","jsdocUtils","filterTags","templateTags","getPresentTags","closureGenericTypes","parseClosureTemplateTag","cjsOrESMScope","childScopes","block","type","allDefinedTypes","Set","variables","concat","jsdocTagsWithPossibleType","tagMightHaveTypePosition","parsedType","tryParseType","parseType","traverse","structuredTypes","has","Array","isArray","includes","markVariableAsUsed","iterateAllJsdocs","meta","docs","description","url","schema","additionalProperties","properties","items"],"sources":["../../src/rules/noUndefinedTypes.js"],"sourcesContent":["import {\n  getJSDocComment,\n\n  traverse,\n  parse as parseType,\n  tryParse as tryParseType,\n} from '@es-joy/jsdoccomment';\nimport iterateJsdoc, {\n  parseComment,\n} from '../iterateJsdoc';\nimport jsdocUtils from '../jsdocUtils';\n\nconst extraTypes = [\n  'null', 'undefined', 'void', 'string', 'boolean', 'object',\n  'function', 'symbol',\n  'number', 'bigint', 'NaN', 'Infinity',\n  'any', '*', 'never', 'unknown', 'const',\n  'this', 'true', 'false',\n  'Array', 'Object', 'RegExp', 'Date', 'Function',\n];\n\n// https://www.typescriptlang.org/docs/handbook/utility-types.html\nconst typescriptGlobals = [\n  'Partial',\n  'Required',\n  'Readonly',\n  'Record',\n  'Pick',\n  'Omit',\n  'Exclude',\n  'Extract',\n  'NonNullable',\n  'Parameters',\n  'ConstructorParameters',\n  'ReturnType',\n  'InstanceType',\n  'ThisParameterType',\n  'OmitThisParameter',\n  'ThisType',\n  'Uppercase',\n  'Lowercase',\n  'Capitalize',\n  'Uncapitalize',\n];\n\nconst stripPseudoTypes = (str) => {\n  return str && str.replace(/(?:\\.|<>|\\.<>|\\[\\])$/u, '');\n};\n\nexport default iterateJsdoc(({\n  context,\n  node,\n  report,\n  settings,\n  sourceCode,\n  utils,\n}) => {\n  const {\n    scopeManager,\n  } = sourceCode;\n  const {\n    globalScope,\n  } = scopeManager;\n\n  const {\n    definedTypes = [],\n  } = context.options[0] || {};\n\n  let definedPreferredTypes = [];\n  const {\n    preferredTypes,\n    structuredTags,\n    mode,\n  } = settings;\n  if (Object.keys(preferredTypes).length) {\n    definedPreferredTypes = Object.values(preferredTypes).map((preferredType) => {\n      if (typeof preferredType === 'string') {\n        // May become an empty string but will be filtered out below\n        return stripPseudoTypes(preferredType);\n      }\n\n      if (!preferredType) {\n        return undefined;\n      }\n\n      if (typeof preferredType !== 'object') {\n        utils.reportSettings(\n          'Invalid `settings.jsdoc.preferredTypes`. Values must be falsy, a string, or an object.',\n        );\n      }\n\n      return stripPseudoTypes(preferredType.replacement);\n    })\n      .filter((preferredType) => {\n        return preferredType;\n      });\n  }\n\n  const typedefDeclarations = context.getAllComments()\n    .filter((comment) => {\n      return (/^\\*\\s/u).test(comment.value);\n    })\n    .map((commentNode) => {\n      return parseComment(commentNode, '');\n    })\n    .flatMap((doc) => {\n      return doc.tags.filter(({\n        tag,\n      }) => {\n        return utils.isNamepathDefiningTag(tag);\n      });\n    })\n    .map((tag) => {\n      return tag.name;\n    });\n\n  const ancestorNodes = [];\n\n  let currentNode = node;\n  // No need for Program node?\n  while (currentNode?.parent) {\n    ancestorNodes.push(currentNode);\n    currentNode = currentNode.parent;\n  }\n\n  const getTemplateTags = function (ancestorNode) {\n    const commentNode = getJSDocComment(sourceCode, ancestorNode, settings);\n    if (!commentNode) {\n      return [];\n    }\n\n    const jsdoc = parseComment(commentNode, '');\n\n    return jsdocUtils.filterTags(jsdoc.tags, (tag) => {\n      return tag.tag === 'template';\n    });\n  };\n\n  // `currentScope` may be `null` or `Program`, so in such a case,\n  //  we look to present tags instead\n  const templateTags = ancestorNodes.length ?\n    ancestorNodes.flatMap((ancestorNode) => {\n      return getTemplateTags(ancestorNode);\n    }) :\n    utils.getPresentTags('template');\n\n  const closureGenericTypes = templateTags.flatMap((tag) => {\n    return utils.parseClosureTemplateTag(tag);\n  });\n\n  // In modules, including Node, there is a global scope at top with the\n  //  Program scope inside\n  const cjsOrESMScope = globalScope.childScopes[0]?.block?.type === 'Program';\n\n  const allDefinedTypes = new Set(globalScope.variables.map(({\n    name,\n  }) => {\n    return name;\n  })\n\n    // If the file is a module, concat the variables from the module scope.\n    .concat(\n      cjsOrESMScope ?\n        globalScope.childScopes.flatMap(({\n          variables,\n        }) => {\n          return variables;\n        }).map(({\n          name,\n        }) => {\n          return name;\n        }) : [],\n    )\n    .concat(extraTypes)\n    .concat(typedefDeclarations)\n    .concat(definedTypes)\n    .concat(definedPreferredTypes)\n    .concat(\n      settings.mode === 'jsdoc' ?\n        [] :\n        [\n          ...settings.mode === 'typescript' ? typescriptGlobals : [],\n          ...closureGenericTypes,\n        ],\n    ));\n\n  const jsdocTagsWithPossibleType = utils.filterTags(({\n    tag,\n  }) => {\n    return utils.tagMightHaveTypePosition(tag) && (tag !== 'suppress' || settings.mode !== 'closure');\n  });\n\n  for (const tag of jsdocTagsWithPossibleType) {\n    let parsedType;\n\n    try {\n      parsedType = mode === 'permissive' ? tryParseType(tag.type) : parseType(tag.type, mode);\n    } catch {\n      // On syntax error, will be handled by valid-types.\n      continue;\n    }\n\n    traverse(parsedType, ({\n      type,\n      value,\n    }) => {\n      if (type === 'JsdocTypeName') {\n        const structuredTypes = structuredTags[tag.tag]?.type;\n        if (!allDefinedTypes.has(value) &&\n          (!Array.isArray(structuredTypes) || !structuredTypes.includes(value))\n        ) {\n          report(`The type '${value}' is undefined.`, null, tag);\n        } else if (!extraTypes.includes(value)) {\n          context.markVariableAsUsed(value);\n        }\n      }\n    });\n  }\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    docs: {\n      description: 'Checks that types in jsdoc comments are defined.',\n      url: 'https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-no-undefined-types',\n    },\n    schema: [\n      {\n        additionalProperties: false,\n        properties: {\n          definedTypes: {\n            items: {\n              type: 'string',\n            },\n            type: 'array',\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'suggestion',\n  },\n});\n"],"mappings":"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"}