import { f as findHeaderByName, r as removeHeader } from './headers-89035da7.js';
import { b as isThirdPartyRequest, d as getHost } from './url-94de2ee3.js';
import { RequestType } from './request-type.js';

/**
 * This module applies stealth actions in page context
 */
var StealthHelper = /** @class */ (function () {
    function StealthHelper() {
    }
    /**
     * Sends a Global Privacy Control DOM signal
     */
    StealthHelper.setDomSignal = function () {
        try {
            if ('globalPrivacyControl' in Navigator.prototype) {
                return;
            }
            Object.defineProperty(Navigator.prototype, 'globalPrivacyControl', {
                get: function () { return true; },
                configurable: true,
                enumerable: true,
            });
        }
        catch (ex) {
            // Ignore
        }
    };
    return StealthHelper;
}());

/**
 * Stealth action bitwise masks
 */
var StealthActions;
(function (StealthActions) {
    StealthActions[StealthActions["HIDE_REFERRER"] = 1] = "HIDE_REFERRER";
    StealthActions[StealthActions["HIDE_SEARCH_QUERIES"] = 2] = "HIDE_SEARCH_QUERIES";
    StealthActions[StealthActions["BLOCK_CHROME_CLIENT_DATA"] = 4] = "BLOCK_CHROME_CLIENT_DATA";
    StealthActions[StealthActions["SEND_DO_NOT_TRACK"] = 8] = "SEND_DO_NOT_TRACK";
    StealthActions[StealthActions["FIRST_PARTY_COOKIES"] = 16] = "FIRST_PARTY_COOKIES";
    StealthActions[StealthActions["THIRD_PARTY_COOKIES"] = 32] = "THIRD_PARTY_COOKIES";
})(StealthActions || (StealthActions = {}));
/**
 * Stealth service module
 */
var StealthService = /** @class */ (function () {
    /**
     * Constructor
     *
     * @param config
     */
    function StealthService(config) {
        this.config = config;
    }
    /**
     * Returns synthetic set of rules matching the specified request
     */
    StealthService.prototype.getCookieRulesTexts = function () {
        var result = [];
        if (this.config.selfDestructFirstPartyCookies) {
            result.push(StealthService.generateCookieRuleText(this.config.selfDestructFirstPartyCookiesTime));
        }
        if (this.config.selfDestructThirdPartyCookies) {
            result.push(StealthService.generateCookieRuleText(this.config.selfDestructThirdPartyCookiesTime, true));
        }
        return result;
    };
    /**
     * Applies stealth actions to request headers
     *
     * @param requestUrl
     * @param requestType
     * @param requestHeaders
     */
    StealthService.prototype.processRequestHeaders = function (requestUrl, requestType, requestHeaders) {
        var stealthActions = 0;
        // Remove referrer for third-party requests
        if (this.config.hideReferrer) {
            var refHeader = findHeaderByName(requestHeaders, StealthService.HEADERS.REFERRER);
            if (refHeader
                && refHeader.value
                && isThirdPartyRequest(requestUrl, refHeader.value)) {
                refHeader.value = StealthService.createMockRefHeaderUrl(requestUrl);
                stealthActions |= StealthActions.HIDE_REFERRER;
            }
        }
        // Hide referrer in case of search engine is referrer
        var isMainFrame = requestType === RequestType.Document;
        if (this.config.hideSearchQueries && isMainFrame) {
            var refHeader = findHeaderByName(requestHeaders, StealthService.HEADERS.REFERRER);
            if (refHeader
                && refHeader.value
                && StealthService.isSearchEngine(refHeader.value)
                && isThirdPartyRequest(requestUrl, refHeader.value)) {
                refHeader.value = StealthService.createMockRefHeaderUrl(requestUrl);
                stealthActions |= StealthActions.HIDE_SEARCH_QUERIES;
            }
        }
        // Remove X-Client-Data header
        if (this.config.blockChromeClientData) {
            if (removeHeader(requestHeaders, StealthService.HEADERS.X_CLIENT_DATA)) {
                stealthActions |= StealthActions.BLOCK_CHROME_CLIENT_DATA;
            }
        }
        // Adding Do-Not-Track (DNT) header
        if (this.config.sendDoNotTrack) {
            requestHeaders.push(StealthService.HEADER_VALUES.DO_NOT_TRACK);
            requestHeaders.push(StealthService.HEADER_VALUES.GLOBAL_PRIVACY_CONTROL);
            stealthActions |= StealthActions.SEND_DO_NOT_TRACK;
        }
        return stealthActions;
    };
    /**
     * Returns set dom signal script if sendDoNotTrack enabled, otherwise empty string
     */
    StealthService.prototype.getSetDomSignalScript = function () {
        if (this.config.sendDoNotTrack) {
            return "(".concat(StealthHelper.setDomSignal.toString(), ")()");
        }
        return '';
    };
    /**
     * Generates rule removing cookies
     *
     * @param maxAgeMinutes Cookie maxAge in minutes
     * @param isThirdParty Flag for generating third-party rule texts
     */
    StealthService.generateCookieRuleText = function (maxAgeMinutes, isThirdParty) {
        if (isThirdParty === void 0) { isThirdParty = false; }
        var maxAgeOption = maxAgeMinutes > 0 ? ";maxAge=".concat(maxAgeMinutes * 60) : '';
        var thirdPartyOption = isThirdParty ? ',third-party' : '';
        var ruleText = "$cookie=/.+/".concat(maxAgeOption).concat(thirdPartyOption);
        return ruleText;
    };
    /**
     * Crops url path
     *
     * @param url URL
     * @return URL without path
     */
    StealthService.createMockRefHeaderUrl = function (url) {
        var host = getHost(url);
        return "".concat((url.indexOf('https') === 0 ? 'https://' : 'http://') + host, "/");
    };
    /**
     * Is url search engine
     *
     * @param url
     */
    StealthService.isSearchEngine = function (url) {
        return StealthService.SEARCH_ENGINES.some(function (searchEngineRegex) { return searchEngineRegex.test(url); });
    };
    /**
     * Headers
     */
    StealthService.HEADERS = {
        REFERRER: 'Referer',
        X_CLIENT_DATA: 'X-Client-Data',
        DO_NOT_TRACK: 'DNT',
    };
    /**
     * Header values
     */
    StealthService.HEADER_VALUES = {
        DO_NOT_TRACK: {
            name: 'DNT',
            value: '1',
        },
        GLOBAL_PRIVACY_CONTROL: {
            name: 'Sec-GPC',
            value: '1',
        },
    };
    /**
     * Search engines regexps
     *
     * @type {Array.<string>}
     */
    StealthService.SEARCH_ENGINES = [
        /https?:\/\/(www\.)?google\./i,
        /https?:\/\/(www\.)?yandex\./i,
        /https?:\/\/(www\.)?bing\./i,
        /https?:\/\/(www\.)?yahoo\./i,
        /https?:\/\/(www\.)?go\.mail\.ru/i,
        /https?:\/\/(www\.)?ask\.com/i,
        /https?:\/\/(www\.)?aol\.com/i,
        /https?:\/\/(www\.)?baidu\.com/i,
        /https?:\/\/(www\.)?seznam\.cz/i,
    ];
    return StealthService;
}());

export { StealthActions, StealthService };
