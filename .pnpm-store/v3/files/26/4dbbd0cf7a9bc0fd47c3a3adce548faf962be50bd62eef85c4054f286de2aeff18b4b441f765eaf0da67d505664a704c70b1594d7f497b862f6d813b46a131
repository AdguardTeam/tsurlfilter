/**
 * Splits the string by the delimiter, ignoring escaped delimiters.
 *
 * @param str - string to split
 * @param delimiter - delimiter
 * @param escapeCharacter - escape character
 * @param preserveAllTokens - if true, preserve empty parts
 * @param unescape - if true, delete EscapeCharacter
 * @return array of string parts
 */
export declare function splitByDelimiterWithEscapeCharacter(str: string, delimiter: string, escapeCharacter: string, preserveAllTokens: boolean, unescape?: boolean): string[];
/**
 * Checks if the specified string starts with a substr at the specified index.
 *
 * @param str - String to check
 * @param startIndex - Index to start checking from
 * @param substr - Substring to check
 * @return boolean true if it does start
 */
export declare function startsAtIndexWith(str: string, startIndex: number, substr: string): boolean;
/**
 * Checks if str has unquoted substr
 *
 * @param str
 * @param substr
 */
export declare function hasUnquotedSubstring(str: string, substr: string): boolean;
/**
 * djb2 hash algorithm
 *
 * @param str string to get hash
 * @param begin index from
 * @param end index to
 * @return {number} hash
 */
export declare function fastHashBetween(str: string, begin: number, end: number): number;
/**
 * djb2 hash algorithm
 *
 * @param str string to get hash
 * @return {number} hash
 */
export declare function fastHash(str: string): number;
/**
 * Look for any symbol from "chars" array starting at "start" index or from the start of the string
 *
 * @param str   String to search
 * @param chars Chars to search for
 * @param start Start index (optional, inclusive)
 * @return int Index of the element found or -1 if not
 */
export declare function indexOfAny(str: string, chars: string[], start?: number): number;
/**
 * Replaces all occurences of find with replace in str
 *
 * @param str
 * @param find
 * @param replace
 */
export declare function replaceAll(str: string, find: string, replace: string): string;
/**
 * Checks if arrays are equal
 *
 * @param left array
 * @param right array
 * @return {boolean} true on equality
 */
export declare function stringArraysEquals(left: string[] | null, right: string[] | null): boolean;
/**
 * Checks if arrays have an intersection
 *
 * @param left array
 * @param right array
 * @return {boolean} true on equality
 */
export declare function stringArraysHaveIntersection(left: string[] | null, right: string[] | null): boolean;
