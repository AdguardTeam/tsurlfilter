/**
 * The SourceRuleIdxAndFilterId contains the index number of the source rule and
 * the filter id of the rule.
 */
export declare type SourceRuleIdxAndFilterId = {
    sourceRuleIndex: number;
    filterId: number;
};
/**
 * The Source contains the relationship between the original rules (filter id
 * with rule index) and the converted rules (declarative rule id).
 */
export declare type Source = {
    declarativeRuleId: number;
} & SourceRuleIdxAndFilterId;
export interface ISourceMap {
    getByDeclarativeRuleId(ruleId: number): SourceRuleIdxAndFilterId[];
    getBySourceRuleIndex(source: SourceRuleIdxAndFilterId): number[];
    serialize(): string;
}
/**
 * Contains a list of records with source rule ID, converted rule ID
 * and filter ID.
 * Can return the source filter and rule for the provided conversion rule ID.
 */
export declare class SourceMap implements ISourceMap {
    private sources;
    /**
     * Needs for fast search for source rule.
     */
    private ruleIdMap;
    /**
     * Needs for fast search for source rule.
     */
    private declarativeIdMap;
    /**
     * Creates new SourceMap from provided list of sources.
     *
     * @param sources List of sources.
     */
    constructor(sources: Source[]);
    /**
     * Creates unique key for provided pair of source rule and filter id.
     *
     * @param source Pair of source rule and filter id.
     *
     * @returns Unique key for dictionary.
     */
    static getKeyFromSource(source: SourceRuleIdxAndFilterId): string;
    /**
     * Returns source filter id and source text rule id
     * for provided declarative rule id.
     *
     * @param ruleId Converted rule id.
     *
     * @returns List of pairs: source filter id and source rule id.
     */
    getByDeclarativeRuleId(ruleId: number): SourceRuleIdxAndFilterId[];
    /**
     * Returns ids of converted declarative rules for provided pairs of source
     * filter id and source text rule.
     *
     * @param source Pair of source rule and filter id.
     *
     * @returns List of ids of converted declarative rules.
     */
    getBySourceRuleIndex(source: SourceRuleIdxAndFilterId): number[];
    /**
     * Deserializes array of sources from string.
     *
     * @param sourceString The original map that was serialized into a string.
     *
     * @returns List of sources.
     */
    static deserializeSources(sourceString: string): Source[];
    /**
     * Serializes source map to JSON string.
     *
     * @todo (TODO:) Can use protocol VLQ.
     *
     * @returns JSON string.
     */
    serialize(): string;
}
