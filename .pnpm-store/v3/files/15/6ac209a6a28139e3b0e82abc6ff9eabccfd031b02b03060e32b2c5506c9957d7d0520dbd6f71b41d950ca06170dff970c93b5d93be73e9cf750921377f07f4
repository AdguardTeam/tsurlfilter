import { RuleScanner } from './scanner/rule-scanner';
import { ScannerType } from './scanner/scanner-type';
/**
 * List identifier max value.
 * We use "number" type for storage indexes, so we have some limits for list identifiers,
 * We line number for rule index, so if we save 11 ranks for rules, then we have 6 ranks left for list ids.
 * Check RuleStorageScanner class for more info.
 */
export declare const LIST_ID_MAX_VALUE: number;
/**
 * RuleList represents a set of filtering rules
 */
export interface IRuleList {
    /**
     * GetID returns the rule list identifier
     */
    getId(): number;
    /**
     * Creates a new scanner that reads the list contents
     */
    newScanner(scannerType: ScannerType): RuleScanner;
    /**
     * Retrieves rule text by its index
     *
     * @param ruleIdx
     */
    retrieveRuleText(ruleIdx: number): string | null;
    /**
     * Closes the rules list
     */
    close(): void;
}
/**
 * StringRuleList represents a string-based rule list
 */
export declare class StringRuleList implements IRuleList {
    /**
     * Rule list ID
     */
    private readonly id;
    /**
     * String with filtering rules (one per line)
     */
    private readonly rulesText;
    /**
     * Whether to ignore cosmetic rules or not
     */
    private readonly ignoreCosmetic;
    /**
     * Whether to ignore javascript cosmetic rules or not
     */
    private readonly ignoreJS;
    /**
     * Whether to ignore unsafe rules or not
     */
    private readonly ignoreUnsafe;
    /**
     * Constructor
     *
     * @param listId
     * @param ruleText
     * @param ignoreCosmetic (Optional) default false
     * @param ignoreJS (Optional) default false
     * @param ignoreUnsafe (Optional) default false
     */
    constructor(listId: number, ruleText: string, ignoreCosmetic?: boolean, ignoreJS?: boolean, ignoreUnsafe?: boolean);
    /**
     * Close does nothing as here's nothing to close in the StringRuleList
     */
    close(): void;
    /**
     * @return the rule list identifier
     */
    getId(): number;
    /**
     * Creates a new rules scanner that reads the list contents
     * @return scanner object
     */
    newScanner(scannerType: ScannerType): RuleScanner;
    /**
     * Finds rule text by its index.
     * If there's no rule by that index or rule is invalid, it will return null
     *
     * @param ruleIdx
     * @return rule text or null
     */
    retrieveRuleText(ruleIdx: number): string | null;
}
