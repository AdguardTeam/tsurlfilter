{"version":3,"file":"sortTags.js","names":["iterateJsdoc","context","jsdoc","utils","tagSequence","defaultTagOrder","alphabetizeExtras","options","otherPos","indexOf","endPos","length","ongoingCount","idx","tag","tags","entries","originalIndex","source","originalLine","firstChangedTagLine","firstChangedTagIndex","sortedTags","JSON","parse","stringify","sort","tagNew","tagOld","checkOrSetFirstChanged","newPos","oldPos","preferredNewPos","preferredOldPos","undefined","firstLine","getFirstLine","fix","itemsToMoveRange","Array","from","keys","unchangedPriorTagDescriptions","slice","reduce","ct","initialOffset","removeTag","changedTags","extraTagCount","changedTag","addTag","tokens","end","addLine","reportJSDoc","join","iterateAllJsdocs","meta","docs","description","url","fixable","schema","additionalProperies","properties","type","items"],"sources":["../../src/rules/sortTags.js"],"sourcesContent":["import defaultTagOrder from '../defaultTagOrder';\nimport iterateJsdoc from '../iterateJsdoc';\n\nexport default iterateJsdoc(({\n  context,\n  jsdoc,\n  utils,\n}) => {\n  const {\n    tagSequence = defaultTagOrder,\n    alphabetizeExtras = false,\n  } = context.options[0] || {};\n\n  const otherPos = tagSequence.indexOf('-other');\n  const endPos = otherPos > -1 ? otherPos : tagSequence.length;\n\n  let ongoingCount = 0;\n  for (const [\n    idx,\n    tag,\n  ] of jsdoc.tags.entries()) {\n    tag.originalIndex = idx;\n    ongoingCount += tag.source.length;\n    tag.originalLine = ongoingCount;\n  }\n\n  let firstChangedTagLine;\n  let firstChangedTagIndex;\n  const sortedTags = JSON.parse(JSON.stringify(jsdoc.tags));\n  sortedTags.sort(({\n    tag: tagNew,\n  }, {\n    originalIndex,\n    originalLine,\n    tag: tagOld,\n  }) => {\n    // Optimize: Just keep relative positions if the same tag name\n    if (tagNew === tagOld) {\n      return 0;\n    }\n\n    const checkOrSetFirstChanged = () => {\n      if (!firstChangedTagLine || originalLine < firstChangedTagLine) {\n        firstChangedTagLine = originalLine;\n        firstChangedTagIndex = originalIndex;\n      }\n    };\n\n    const newPos = tagSequence.indexOf(tagNew);\n    const oldPos = tagSequence.indexOf(tagOld);\n\n    const preferredNewPos = newPos === -1 ? endPos : newPos;\n    const preferredOldPos = oldPos === -1 ? endPos : oldPos;\n\n    if (preferredNewPos < preferredOldPos) {\n      checkOrSetFirstChanged();\n      return -1;\n    }\n\n    if (preferredNewPos > preferredOldPos) {\n      return 1;\n    }\n\n    // preferredNewPos === preferredOldPos\n    if (\n      !alphabetizeExtras ||\n\n      // Optimize: If tagNew (or tagOld which is the same) was found in the\n      //   priority array, it can maintain its relative positionâ€”without need\n      //   of alphabetizing (secondary sorting)\n      newPos >= 0\n    ) {\n      return 0;\n    }\n\n    if (tagNew < tagOld) {\n      checkOrSetFirstChanged();\n      return -1;\n    }\n\n    // tagNew > tagOld\n    return 1;\n  });\n\n  if (firstChangedTagLine === undefined) {\n    return;\n  }\n\n  const firstLine = utils.getFirstLine();\n\n  const fix = () => {\n    const itemsToMoveRange = [\n      ...Array.from({\n        length: jsdoc.tags.length - firstChangedTagIndex,\n      }).keys(),\n    ];\n\n    const unchangedPriorTagDescriptions = jsdoc.tags.slice(\n      0,\n      firstChangedTagIndex,\n    ).reduce((ct, {\n      source,\n    }) => {\n      return ct + source.length - 1;\n    }, 0);\n\n    // This offset includes not only the offset from where the first tag\n    //   must begin, and the additional offset of where the first changed\n    //   tag begins, but it must also account for prior descriptions\n    const initialOffset = firstLine + firstChangedTagIndex +\n\n      // May be the first tag, so don't try finding a prior one if so\n      unchangedPriorTagDescriptions;\n\n    // Use `firstChangedTagLine` for line number to begin reporting/splicing\n    for (const idx of itemsToMoveRange) {\n      utils.removeTag(idx + firstChangedTagIndex);\n    }\n\n    const changedTags = sortedTags.slice(firstChangedTagIndex);\n    let extraTagCount = 0;\n\n    for (const idx of itemsToMoveRange) {\n      const changedTag = changedTags[idx];\n\n      utils.addTag(\n        changedTag.tag,\n        extraTagCount + initialOffset + idx,\n        {\n          ...changedTag.source[0].tokens,\n\n          // `comment-parser` puts the `end` within the `tags` section, so\n          //   avoid adding another to jsdoc.source\n          end: '',\n        },\n      );\n\n      for (const {\n        tokens,\n      } of changedTag.source.slice(1)) {\n        if (!tokens.end) {\n          utils.addLine(\n            extraTagCount + initialOffset + idx + 1,\n            {\n              ...tokens,\n              end: '',\n            },\n          );\n          extraTagCount++;\n        }\n      }\n    }\n  };\n\n  utils.reportJSDoc(\n    `Tags are not in the prescribed order: ${tagSequence.join(', ')}`,\n    jsdoc.tags[firstChangedTagIndex],\n    fix,\n    true,\n  );\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    docs: {\n      description: '',\n      url: 'https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-sort-tags',\n    },\n    fixable: 'code',\n    schema: [\n      {\n        additionalProperies: false,\n        properties: {\n          alphabetizeExtras: {\n            type: 'boolean',\n          },\n          tagSequence: {\n            items: {\n              type: 'string',\n            },\n            type: 'array',\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'suggestion',\n  },\n});\n"],"mappings":"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"}