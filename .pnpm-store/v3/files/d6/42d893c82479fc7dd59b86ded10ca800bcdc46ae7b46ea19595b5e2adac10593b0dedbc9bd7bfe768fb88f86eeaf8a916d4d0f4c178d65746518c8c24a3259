import { NetworkRule } from '../network-rule';
import { DeclarativeRule } from './declarative-rule';
/**
 * Rule priority. Defaults to 1. When specified, should be >= 1.
 */
export declare enum DeclarativeRulePriority {
    DocumentException = 4,
    ImportantException = 3,
    Important = 2,
    Exception = 1
}
/**
 * Rule Converter class
 * Converts an instance of NetworkRule to DeclarativeRule
 *
 * https://developer.chrome.com/docs/extensions/reference/declarativeNetRequest/#type-Rule
 */
export declare class DeclarativeRuleConverter {
    /**
     * Gets resource type matching request type
     *
     * @param requestTypes
     * @param returnAll
     */
    private static getResourceTypes;
    private static isASCII;
    /**
     * String path to web accessible resourses,
     * relative to the extension root dir.
     * Should start with leading slash '/'
     */
    private static validatedWebAccesibleResoursesPath;
    /**
     * String path to web accessible resourses,
     * relative to the extension root dir.
     * Should start with leading slash '/'
     */
    static set webAccesibleResoursesPath(value: string);
    /**
     * Converts to punycode non if string contains non ASCII characters
     * @param str
     * @private
     */
    private static prepareASCII;
    /**
     * The entries must consist of only ascii characters
     *
     * @param domains
     */
    private static prepareDomains;
    /**
     * Rule priority. Defaults to 1. When specified, should be >= 1.
     *
     * document exceptions > allowlist + $important > $important > allowlist > basic rules
     *
     * @param rule
     */
    private static getPriority;
    /**
     * Rule redirect action
     *
     * @param rule
     */
    private static getRedirectAction;
    /**
     * Rule action
     *
     * @param rule
     */
    private static getAction;
    /**
     * Rule condition
     *
     * @param rule
     */
    private static getCondition;
    /**
     * Converts a rule to declarative rule
     *
     * @param rule - network rule
     * @param id - rule identifier
     */
    static convert(rule: NetworkRule, id: number): DeclarativeRule | null;
}
