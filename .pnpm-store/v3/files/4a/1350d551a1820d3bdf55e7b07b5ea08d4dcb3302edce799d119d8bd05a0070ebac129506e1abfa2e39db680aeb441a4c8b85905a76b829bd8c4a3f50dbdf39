{"version":3,"sources":["../src/collection.mjs"],"names":["collectionTypeSet","Set","get","collection","key","type","valueType","isCollection","has","set","value","add"],"mappings":";;;;;;;;;AAAA;;AAEA;;;AAGA,MAAMA,iBAAiB,GAAG,IAAIC,GAAJ,CAAQ,CAChC,WADgC,EAEhC,OAFgC,EAGhC,KAHgC,EAIhC,QAJgC,EAKhC,KALgC,CAAR,CAA1B;AAQA;;;;;;;;;AAQO,SAASC,GAAT,CAAaC,UAAb,EAAyBC,GAAzB,EAA8BC,IAAI,GAAG,IAArC,EAA2C;AAChD,QAAMC,SAAS,GAAGD,IAAI,IAAI,0BAAWF,UAAX,CAA1B;;AAEA,UAAQG,SAAR;AACE,SAAK,WAAL;AACA,SAAK,OAAL;AACA,SAAK,QAAL;AACE,aAAOH,UAAU,CAACC,GAAD,CAAjB;;AACF,SAAK,KAAL;AACE,aAAOD,UAAU,CAACD,GAAX,CAAeE,GAAf,CAAP;;AACF,SAAK,KAAL;AACE;AACA;AACA,aAAOA,GAAP;;AACF;AAXF;AAaD;AAED;;;;;;;AAKO,SAASG,YAAT,CAAsBF,IAAtB,EAA4B;AACjC,SAAOL,iBAAiB,CAACQ,GAAlB,CAAsBH,IAAtB,CAAP;AACD;AAED;;;;;;;;;;;AASO,SAASI,GAAT,CAAaN,UAAb,EAAyBC,GAAzB,EAA8BM,KAA9B,EAAqCL,IAAI,GAAG,IAA5C,EAAkD;AACvD,QAAMC,SAAS,GAAGD,IAAI,IAAI,0BAAWF,UAAX,CAA1B;;AAEA,UAAQG,SAAR;AACE,SAAK,WAAL;AACA,SAAK,OAAL;AACA,SAAK,QAAL;AACEH,MAAAA,UAAU,CAACC,GAAD,CAAV,GAAkBM,KAAlB;AACA;;AACF,SAAK,KAAL;AACEP,MAAAA,UAAU,CAACM,GAAX,CAAeL,GAAf,EAAoBM,KAApB;AACA;;AACF,SAAK,KAAL;AACEP,MAAAA,UAAU,CAACQ,GAAX,CAAeD,KAAf;AACA;;AACF;AAZF;;AAeA,SAAOP,UAAP;AACD","sourcesContent":["import { detectType } from './detector.mjs';\n\n/**\n * collection types\n */\nconst collectionTypeSet = new Set([\n  'Arguments',\n  'Array',\n  'Map',\n  'Object',\n  'Set'\n]);\n\n/**\n * get value from collection\n *\n * @param {Array|Object|Map|Set} collection\n * @param {string|number|symbol} key\n * @param {string} [type=null]\n * @return {*}\n */\nexport function get(collection, key, type = null) {\n  const valueType = type || detectType(collection);\n\n  switch (valueType) {\n    case 'Arguments':\n    case 'Array':\n    case 'Object':\n      return collection[key];\n    case 'Map':\n      return collection.get(key);\n    case 'Set':\n      // NOTE: Set.prototype.keys is alias of Set.prototype.values\n      // it means key is equals value\n      return key;\n    default:\n  }\n}\n\n/**\n * check to type string is collection\n *\n * @param {string} type\n */\nexport function isCollection(type) {\n  return collectionTypeSet.has(type);\n}\n\n/**\n * set value to collection\n *\n * @param {Array|Object|Map|Set} collection\n * @param {string|number|symbol} key\n * @param {*} value\n * @param {string} [type=null]\n * @return {Array|Object|Map|Set}\n */\nexport function set(collection, key, value, type = null) {\n  const valueType = type || detectType(collection);\n\n  switch (valueType) {\n    case 'Arguments':\n    case 'Array':\n    case 'Object':\n      collection[key] = value;\n      break;\n    case 'Map':\n      collection.set(key, value);\n      break;\n    case 'Set':\n      collection.add(value);\n      break;\n    default:\n  }\n\n  return collection;\n}\n"],"file":"collection.js"}