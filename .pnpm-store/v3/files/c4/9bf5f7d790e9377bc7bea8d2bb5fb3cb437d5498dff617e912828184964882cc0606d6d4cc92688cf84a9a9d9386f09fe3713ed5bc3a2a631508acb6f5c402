import { NetworkRule } from '../network-rule';
import { IndexedRule } from '../rule';
/**
 * Network rule with index and hash.
 */
export declare class IndexedNetworkRuleWithHash extends IndexedRule {
    /**
     * Rule's hash created with {@link fastHash}. Needed to quickly compare
     * two different network rules with the same pattern part for future
     * checking of $badfilter application from one of them to another.
     */
    hash: number;
    /**
     * Overrided rule from {@link IndexedRule} with type {@link NetworkRule}
     * but not {@link IRule}.
     *
     * By using 'declare', we instruct the compiler not to generate runtime
     * code. Instead, it will use the property of the base class with
     * the overridden type.
     *
     * @see {@link https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#the-usedefineforclassfields-flag-and-the-declare-property-modifier}
     */
    rule: NetworkRule;
    /**
     * Constructor.
     *
     * @param rule Item of {@link NetworkRule}.
     * @param index Rule's index.
     * @param hash Hash of the rule.
     */
    constructor(rule: NetworkRule, index: number, hash: number);
    /**
     * Creates hash for pattern part of the network rule and return it. Needed
     * to quickly compare two different rules with the same pattern part for
     * future checking of $badfilter application from one of them to another.
     *
     * @param networkRule Item of {@link NetworkRule}.
     *
     * @returns Hash for patter part of the network rule.
     */
    static createRuleHash(networkRule: NetworkRule): number;
    /**
     * Create {@link IndexedNetworkRuleWithHash} from rule. If an error
     * was detected during the conversion - return it.
     *
     * @param filterId Filter id.
     * @param lineIndex Rule's line index in that filter.
     * @param ruleConvertedToAGSyntax Rule which was converted to AG syntax.
     *
     * @throws Error when conversion failed.
     *
     * @returns Item of {@link IndexedNetworkRuleWithHash} or Error.
     */
    private static createIndexedNetworkRuleWithHash;
    /**
     * Creates {@link IndexedNetworkRuleWithHash} from text string.
     *
     * @param filterId Filter's id from which rule was extracted.
     * @param lineIndex Line index of rule in that filter.
     * @param rawString Text string.
     *
     * @throws Error when rule cannot be converted to AG syntax or when indexed
     * rule cannot be created from the rule which is already converted to AG
     * syntax.
     *
     * @returns Item of {@link IndexedNetworkRuleWithHash}.
     */
    static createFromRawString(filterId: number, lineIndex: number, rawString: string): IndexedNetworkRuleWithHash[];
}
