import { IAdvancedModifier } from './advanced-modifier';
/**
 * Permitted/restricted values modifier
 */
export interface IValuesModifier extends IAdvancedModifier {
    /**
     * Permitted values
     */
    getPermitted(): string[] | null;
    /**
     * Restricted values
     */
    getRestricted(): string[] | null;
    /**
     * Checks if value matches this modifier
     *
     * @param value
     */
    match(value: string): boolean;
}
/**
 * This is the base class representing double values modifiers
 */
export declare class BaseValuesModifier implements IValuesModifier {
    /** list of permitted values or null */
    protected permitted: string[] | null;
    /** list of restricted values or null */
    protected restricted: string[] | null;
    /**
     * Value
     */
    private readonly value;
    /**
     * Parses the values string
     *
     * @param values - values string
     *
     * @throws an error if the string is empty or invalid
     */
    constructor(values: string);
    getPermitted(): string[] | null;
    getRestricted(): string[] | null;
    getValue(): string;
    match(value: string): boolean;
}
