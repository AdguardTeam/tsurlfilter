{"version":3,"file":"checkExamples.js","names":["zeroBasedLineIndexAdjust","likelyNestedJSDocIndentSpace","preTagSpaceLength","firstLinePrefixLength","hasCaptionRegex","escapeStringRegexp","str","replace","countChars","ch","match","RegExp","length","defaultMdRules","defaultExpressionRules","quotes","semi","strict","getLinesCols","text","matchLines","colDelta","slice","lastIndexOf","iterateJsdoc","report","utils","context","globalState","semver","gte","ESLint","version","column","line","has","set","Map","matchingFileNameMap","get","options","exampleCodeRegex","rejectExampleCodeRegex","checkDefaults","checkParams","checkProperties","noDefaultExampleRules","checkEslintrc","matchingFileName","matchingFileNameDefaults","matchingFileNameParams","matchingFileNameProperties","paddedIndent","baseConfig","configFile","allowInlineConfig","reportUnusedDisableDirectives","captionRequired","rulePaths","mdRules","undefined","expressionRules","getRegexFromString","checkSource","filename","defaultFileName","rules","lines","cols","skipInit","source","targetTagName","sources","tag","push","nonJSPrefacingCols","nonJSPrefacingLines","string","checkRules","cliConfig","useEslintrc","cliConfigStr","JSON","stringify","src","fileNameMapKey","file","cliFile","cli","CLIEngine","config","getConfigForFile","results","messages","executeOnText","number","codeStartLine","codeStartCol","message","severity","ruleId","startLine","startCol","targetSource","getFilenameInfo","ext","jsFileName","getFilename","includes","filenameInfo","forEachPreferredTag","description","trim","getTagDescription","default","tagName","getPreferredTagName","hasTag","matchingFilenameInfo","test","startingIndex","lastStringCount","exampleCode","lastIndex","exec","index","n0","n1","preMatch","preMatchLines","nonJSPreface","nonJSPrefaceLineCount","idx","indexOf","charsInLastLine","global","iterateAllJsdocs","meta","docs","url","schema","additionalProperties","properties","type"],"sources":["../../src/rules/checkExamples.js"],"sourcesContent":["// Todo: When replace `CLIEngine` with `ESLint` when feature set complete per https://github.com/eslint/eslint/issues/14745\n// https://github.com/eslint/eslint/blob/master/docs/user-guide/migrating-to-7.0.0.md#-the-cliengine-class-has-been-deprecated\nimport {\n  CLIEngine,\n  ESLint,\n} from 'eslint';\nimport semver from 'semver';\nimport iterateJsdoc from '../iterateJsdoc';\n\nconst zeroBasedLineIndexAdjust = -1;\nconst likelyNestedJSDocIndentSpace = 1;\nconst preTagSpaceLength = 1;\n\n// If a space is present, we should ignore it\nconst firstLinePrefixLength = preTagSpaceLength;\n\nconst hasCaptionRegex = /^\\s*<caption>([\\s\\S]*?)<\\/caption>/u;\n\nconst escapeStringRegexp = (str) => {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/gu, '\\\\$&');\n};\n\nconst countChars = (str, ch) => {\n  return (str.match(new RegExp(escapeStringRegexp(ch), 'gu')) || []).length;\n};\n\nconst defaultMdRules = {\n  // \"always\" newline rule at end unlikely in sample code\n  'eol-last': 0,\n\n  // Wouldn't generally expect example paths to resolve relative to JS file\n  'import/no-unresolved': 0,\n\n  // Snippets likely too short to always include import/export info\n  'import/unambiguous': 0,\n\n  'jsdoc/require-file-overview': 0,\n\n  // The end of a multiline comment would end the comment the example is in.\n  'jsdoc/require-jsdoc': 0,\n\n  // Unlikely to have inadvertent debugging within examples\n  'no-console': 0,\n\n  // Often wish to start `@example` code after newline; also may use\n  //   empty lines for spacing\n  'no-multiple-empty-lines': 0,\n\n  // Many variables in examples will be `undefined`\n  'no-undef': 0,\n\n  // Common to define variables for clarity without always using them\n  'no-unused-vars': 0,\n\n  // See import/no-unresolved\n  'node/no-missing-import': 0,\n  'node/no-missing-require': 0,\n\n  // Can generally look nicer to pad a little even if code imposes more stringency\n  'padded-blocks': 0,\n};\n\nconst defaultExpressionRules = {\n  ...defaultMdRules,\n  'chai-friendly/no-unused-expressions': 'off',\n  'no-empty-function': 'off',\n  'no-new': 'off',\n  'no-unused-expressions': 'off',\n  quotes: [\n    'error', 'double',\n  ],\n  semi: [\n    'error', 'never',\n  ],\n  strict: 'off',\n};\n\nconst getLinesCols = (text) => {\n  const matchLines = countChars(text, '\\n');\n\n  const colDelta = matchLines ?\n    text.slice(text.lastIndexOf('\\n') + 1).length :\n    text.length;\n\n  return [\n    matchLines, colDelta,\n  ];\n};\n\nexport default iterateJsdoc(({\n  report,\n  utils,\n  context,\n  globalState,\n}) => {\n  if (semver.gte(ESLint.version, '8.0.0')) {\n    report(\n      'This rule cannot yet be supported for ESLint 8; you ' +\n        'should either downgrade to ESLint 7 or disable this rule. The ' +\n        'possibility for ESLint 8 support is being tracked at https://github.com/eslint/eslint/issues/14745',\n      {\n        column: 1,\n        line: 1,\n      },\n    );\n\n    return;\n  }\n\n  if (!globalState.has('checkExamples-matchingFileName')) {\n    globalState.set('checkExamples-matchingFileName', new Map());\n  }\n\n  const matchingFileNameMap = globalState.get('checkExamples-matchingFileName');\n\n  const options = context.options[0] || {};\n  let {\n    exampleCodeRegex = null,\n    rejectExampleCodeRegex = null,\n  } = options;\n  const {\n    checkDefaults = false,\n    checkParams = false,\n    checkProperties = false,\n    noDefaultExampleRules = false,\n    checkEslintrc = true,\n    matchingFileName = null,\n    matchingFileNameDefaults = null,\n    matchingFileNameParams = null,\n    matchingFileNameProperties = null,\n    paddedIndent = 0,\n    baseConfig = {},\n    configFile,\n    allowInlineConfig = true,\n    reportUnusedDisableDirectives = true,\n    captionRequired = false,\n  } = options;\n\n  // Make this configurable?\n  const rulePaths = [];\n\n  const mdRules = noDefaultExampleRules ? undefined : defaultMdRules;\n\n  const expressionRules = noDefaultExampleRules ? undefined : defaultExpressionRules;\n\n  if (exampleCodeRegex) {\n    exampleCodeRegex = utils.getRegexFromString(exampleCodeRegex);\n  }\n\n  if (rejectExampleCodeRegex) {\n    rejectExampleCodeRegex = utils.getRegexFromString(rejectExampleCodeRegex);\n  }\n\n  const checkSource = ({\n    filename,\n    defaultFileName,\n    rules = expressionRules,\n    lines = 0,\n    cols = 0,\n    skipInit,\n    source,\n    targetTagName,\n    sources = [],\n    tag = {\n      line: 0,\n    },\n  }) => {\n    if (!skipInit) {\n      sources.push({\n        nonJSPrefacingCols: cols,\n        nonJSPrefacingLines: lines,\n        string: source,\n      });\n    }\n\n    // Todo: Make fixable\n    const checkRules = function ({\n      nonJSPrefacingCols,\n      nonJSPrefacingLines,\n      string,\n    }) {\n      const cliConfig = {\n        allowInlineConfig,\n        baseConfig,\n        configFile,\n        reportUnusedDisableDirectives,\n        rulePaths,\n        rules,\n        useEslintrc: checkEslintrc,\n      };\n      const cliConfigStr = JSON.stringify(cliConfig);\n\n      const src = paddedIndent ?\n        string.replace(new RegExp(`(^|\\n) {${paddedIndent}}(?!$)`, 'gu'), '\\n') :\n        string;\n\n      // Programmatic ESLint API: https://eslint.org/docs/developer-guide/nodejs-api\n      const fileNameMapKey = filename ?\n        'a' + cliConfigStr + filename :\n        'b' + cliConfigStr + defaultFileName;\n      const file = filename || defaultFileName;\n      let cliFile;\n      if (matchingFileNameMap.has(fileNameMapKey)) {\n        cliFile = matchingFileNameMap.get(fileNameMapKey);\n      } else {\n        const cli = new CLIEngine(cliConfig);\n        let config;\n        if (filename || checkEslintrc) {\n          config = cli.getConfigForFile(file);\n        }\n\n        // We need a new instance to ensure that the rules that may only\n        //  be available to `file` (if it has its own `.eslintrc`),\n        //  will be defined.\n        cliFile = new CLIEngine({\n          allowInlineConfig,\n          baseConfig: {\n            ...baseConfig,\n            ...config,\n          },\n          configFile,\n          reportUnusedDisableDirectives,\n          rulePaths,\n          rules,\n          useEslintrc: false,\n        });\n        matchingFileNameMap.set(fileNameMapKey, cliFile);\n      }\n\n      const {\n        results: [\n          {\n            messages,\n          },\n        ],\n      } = cliFile.executeOnText(src);\n\n      if (!('line' in tag)) {\n        tag.line = tag.source[0].number;\n      }\n\n      // NOTE: `tag.line` can be 0 if of form `/** @tag ... */`\n      const codeStartLine = tag.line + nonJSPrefacingLines;\n      const codeStartCol = likelyNestedJSDocIndentSpace;\n\n      for (const {\n        message,\n        line,\n        column,\n        severity,\n        ruleId,\n      } of messages) {\n        const startLine = codeStartLine + line + zeroBasedLineIndexAdjust;\n        const startCol = codeStartCol + (\n\n          // This might not work for line 0, but line 0 is unlikely for examples\n          line <= 1 ? nonJSPrefacingCols + firstLinePrefixLength : preTagSpaceLength\n        ) + column;\n\n        report(\n          '@' + targetTagName + ' ' + (severity === 2 ? 'error' : 'warning') +\n            (ruleId ? ' (' + ruleId + ')' : '') + ': ' +\n            message,\n          null,\n          {\n            column: startCol,\n            line: startLine,\n          },\n        );\n      }\n    };\n\n    for (const targetSource of sources) {\n      checkRules(targetSource);\n    }\n  };\n\n  /**\n   *\n   * @param {string} filename\n   * @param {string} [ext] Since `eslint-plugin-markdown` v2, and\n   *   ESLint 7, this is the default which other JS-fenced rules will used.\n   *   Formerly \"md\" was the default.\n   * @returns {{defaultFileName: string, fileName: string}}\n   */\n  const getFilenameInfo = (filename, ext = 'md/*.js') => {\n    let defaultFileName;\n    if (!filename) {\n      const jsFileName = context.getFilename();\n      if (typeof jsFileName === 'string' && jsFileName.includes('.')) {\n        defaultFileName = jsFileName.replace(/\\..*?$/u, `.${ext}`);\n      } else {\n        defaultFileName = `dummy.${ext}`;\n      }\n    }\n\n    return {\n      defaultFileName,\n      filename,\n    };\n  };\n\n  if (checkDefaults) {\n    const filenameInfo = getFilenameInfo(matchingFileNameDefaults, 'jsdoc-defaults');\n    utils.forEachPreferredTag('default', (tag, targetTagName) => {\n      if (!tag.description.trim()) {\n        return;\n      }\n\n      checkSource({\n        source: `(${utils.getTagDescription(tag)})`,\n        targetTagName,\n        ...filenameInfo,\n      });\n    });\n  }\n\n  if (checkParams) {\n    const filenameInfo = getFilenameInfo(matchingFileNameParams, 'jsdoc-params');\n    utils.forEachPreferredTag('param', (tag, targetTagName) => {\n      if (!tag.default || !tag.default.trim()) {\n        return;\n      }\n\n      checkSource({\n        source: `(${tag.default})`,\n        targetTagName,\n        ...filenameInfo,\n      });\n    });\n  }\n\n  if (checkProperties) {\n    const filenameInfo = getFilenameInfo(matchingFileNameProperties, 'jsdoc-properties');\n    utils.forEachPreferredTag('property', (tag, targetTagName) => {\n      if (!tag.default || !tag.default.trim()) {\n        return;\n      }\n\n      checkSource({\n        source: `(${tag.default})`,\n        targetTagName,\n        ...filenameInfo,\n      });\n    });\n  }\n\n  const tagName = utils.getPreferredTagName({\n    tagName: 'example',\n  });\n  if (!utils.hasTag(tagName)) {\n    return;\n  }\n\n  const matchingFilenameInfo = getFilenameInfo(matchingFileName);\n\n  utils.forEachPreferredTag('example', (tag, targetTagName) => {\n    let source = utils.getTagDescription(tag);\n    const match = source.match(hasCaptionRegex);\n\n    if (captionRequired && (!match || !match[1].trim())) {\n      report('Caption is expected for examples.', null, tag);\n    }\n\n    source = source.replace(hasCaptionRegex, '');\n    const [\n      lines,\n      cols,\n    ] = match ? getLinesCols(match[0]) : [\n      0, 0,\n    ];\n\n    if (exampleCodeRegex && !exampleCodeRegex.test(source) ||\n      rejectExampleCodeRegex && rejectExampleCodeRegex.test(source)\n    ) {\n      return;\n    }\n\n    const sources = [];\n    let skipInit = false;\n    if (exampleCodeRegex) {\n      let nonJSPrefacingCols = 0;\n      let nonJSPrefacingLines = 0;\n\n      let startingIndex = 0;\n      let lastStringCount = 0;\n\n      let exampleCode;\n      exampleCodeRegex.lastIndex = 0;\n      while ((exampleCode = exampleCodeRegex.exec(source)) !== null) {\n        const {\n          index,\n          '0': n0,\n          '1': n1,\n        } = exampleCode;\n\n        // Count anything preceding user regex match (can affect line numbering)\n        const preMatch = source.slice(startingIndex, index);\n\n        const [\n          preMatchLines,\n          colDelta,\n        ] = getLinesCols(preMatch);\n\n        let nonJSPreface;\n        let nonJSPrefaceLineCount;\n        if (n1) {\n          const idx = n0.indexOf(n1);\n          nonJSPreface = n0.slice(0, idx);\n          nonJSPrefaceLineCount = countChars(nonJSPreface, '\\n');\n        } else {\n          nonJSPreface = '';\n          nonJSPrefaceLineCount = 0;\n        }\n\n        nonJSPrefacingLines += lastStringCount + preMatchLines + nonJSPrefaceLineCount;\n\n        // Ignore `preMatch` delta if newlines here\n        if (nonJSPrefaceLineCount) {\n          const charsInLastLine = nonJSPreface.slice(nonJSPreface.lastIndexOf('\\n') + 1).length;\n\n          nonJSPrefacingCols += charsInLastLine;\n        } else {\n          nonJSPrefacingCols += colDelta + nonJSPreface.length;\n        }\n\n        const string = n1 || n0;\n        sources.push({\n          nonJSPrefacingCols,\n          nonJSPrefacingLines,\n          string,\n        });\n        startingIndex = exampleCodeRegex.lastIndex;\n        lastStringCount = countChars(string, '\\n');\n        if (!exampleCodeRegex.global) {\n          break;\n        }\n      }\n\n      skipInit = true;\n    }\n\n    checkSource({\n      cols,\n      lines,\n      rules: mdRules,\n      skipInit,\n      source,\n      sources,\n      tag,\n      targetTagName,\n      ...matchingFilenameInfo,\n    });\n  });\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    docs: {\n      description: 'Ensures that (JavaScript) examples within JSDoc adhere to ESLint rules.',\n      url: 'https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-check-examples',\n    },\n    schema: [\n      {\n        additionalProperties: false,\n        properties: {\n          allowInlineConfig: {\n            default: true,\n            type: 'boolean',\n          },\n          baseConfig: {\n            type: 'object',\n          },\n          captionRequired: {\n            default: false,\n            type: 'boolean',\n          },\n          checkDefaults: {\n            default: false,\n            type: 'boolean',\n          },\n          checkEslintrc: {\n            default: true,\n            type: 'boolean',\n          },\n          checkParams: {\n            default: false,\n            type: 'boolean',\n          },\n          checkProperties: {\n            default: false,\n            type: 'boolean',\n          },\n          configFile: {\n            type: 'string',\n          },\n          exampleCodeRegex: {\n            type: 'string',\n          },\n          matchingFileName: {\n            type: 'string',\n          },\n          matchingFileNameDefaults: {\n            type: 'string',\n          },\n          matchingFileNameParams: {\n            type: 'string',\n          },\n          matchingFileNameProperties: {\n            type: 'string',\n          },\n          noDefaultExampleRules: {\n            default: false,\n            type: 'boolean',\n          },\n          paddedIndent: {\n            default: 0,\n            type: 'integer',\n          },\n          rejectExampleCodeRegex: {\n            type: 'string',\n          },\n          reportUnusedDisableDirectives: {\n            default: true,\n            type: 'boolean',\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'suggestion',\n  },\n});\n"],"mappings":";;;;;;AAEA;AAIA;AACA;AAA2C;AAP3C;AACA;;AAQA,MAAMA,wBAAwB,GAAG,CAAC,CAAC;AACnC,MAAMC,4BAA4B,GAAG,CAAC;AACtC,MAAMC,iBAAiB,GAAG,CAAC;;AAE3B;AACA,MAAMC,qBAAqB,GAAGD,iBAAiB;AAE/C,MAAME,eAAe,GAAG,qCAAqC;AAE7D,MAAMC,kBAAkB,GAAIC,GAAG,IAAK;EAClC,OAAOA,GAAG,CAACC,OAAO,CAAC,sBAAsB,EAAE,MAAM,CAAC;AACpD,CAAC;AAED,MAAMC,UAAU,GAAG,CAACF,GAAG,EAAEG,EAAE,KAAK;EAC9B,OAAO,CAACH,GAAG,CAACI,KAAK,CAAC,IAAIC,MAAM,CAACN,kBAAkB,CAACI,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,IAAI,EAAE,EAAEG,MAAM;AAC3E,CAAC;AAED,MAAMC,cAAc,GAAG;EACrB;EACA,UAAU,EAAE,CAAC;EAEb;EACA,sBAAsB,EAAE,CAAC;EAEzB;EACA,oBAAoB,EAAE,CAAC;EAEvB,6BAA6B,EAAE,CAAC;EAEhC;EACA,qBAAqB,EAAE,CAAC;EAExB;EACA,YAAY,EAAE,CAAC;EAEf;EACA;EACA,yBAAyB,EAAE,CAAC;EAE5B;EACA,UAAU,EAAE,CAAC;EAEb;EACA,gBAAgB,EAAE,CAAC;EAEnB;EACA,wBAAwB,EAAE,CAAC;EAC3B,yBAAyB,EAAE,CAAC;EAE5B;EACA,eAAe,EAAE;AACnB,CAAC;AAED,MAAMC,sBAAsB,GAAG;EAC7B,GAAGD,cAAc;EACjB,qCAAqC,EAAE,KAAK;EAC5C,mBAAmB,EAAE,KAAK;EAC1B,QAAQ,EAAE,KAAK;EACf,uBAAuB,EAAE,KAAK;EAC9BE,MAAM,EAAE,CACN,OAAO,EAAE,QAAQ,CAClB;EACDC,IAAI,EAAE,CACJ,OAAO,EAAE,OAAO,CACjB;EACDC,MAAM,EAAE;AACV,CAAC;AAED,MAAMC,YAAY,GAAIC,IAAI,IAAK;EAC7B,MAAMC,UAAU,GAAGZ,UAAU,CAACW,IAAI,EAAE,IAAI,CAAC;EAEzC,MAAME,QAAQ,GAAGD,UAAU,GACzBD,IAAI,CAACG,KAAK,CAACH,IAAI,CAACI,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAACX,MAAM,GAC7CO,IAAI,CAACP,MAAM;EAEb,OAAO,CACLQ,UAAU,EAAEC,QAAQ,CACrB;AACH,CAAC;AAAC,eAEa,IAAAG,qBAAY,EAAC,CAAC;EAC3BC,MAAM;EACNC,KAAK;EACLC,OAAO;EACPC;AACF,CAAC,KAAK;EACJ,IAAIC,eAAM,CAACC,GAAG,CAACC,cAAM,CAACC,OAAO,EAAE,OAAO,CAAC,EAAE;IACvCP,MAAM,CACJ,sDAAsD,GACpD,gEAAgE,GAChE,oGAAoG,EACtG;MACEQ,MAAM,EAAE,CAAC;MACTC,IAAI,EAAE;IACR,CAAC,CACF;IAED;EACF;EAEA,IAAI,CAACN,WAAW,CAACO,GAAG,CAAC,gCAAgC,CAAC,EAAE;IACtDP,WAAW,CAACQ,GAAG,CAAC,gCAAgC,EAAE,IAAIC,GAAG,EAAE,CAAC;EAC9D;EAEA,MAAMC,mBAAmB,GAAGV,WAAW,CAACW,GAAG,CAAC,gCAAgC,CAAC;EAE7E,MAAMC,OAAO,GAAGb,OAAO,CAACa,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;EACxC,IAAI;IACFC,gBAAgB,GAAG,IAAI;IACvBC,sBAAsB,GAAG;EAC3B,CAAC,GAAGF,OAAO;EACX,MAAM;IACJG,aAAa,GAAG,KAAK;IACrBC,WAAW,GAAG,KAAK;IACnBC,eAAe,GAAG,KAAK;IACvBC,qBAAqB,GAAG,KAAK;IAC7BC,aAAa,GAAG,IAAI;IACpBC,gBAAgB,GAAG,IAAI;IACvBC,wBAAwB,GAAG,IAAI;IAC/BC,sBAAsB,GAAG,IAAI;IAC7BC,0BAA0B,GAAG,IAAI;IACjCC,YAAY,GAAG,CAAC;IAChBC,UAAU,GAAG,CAAC,CAAC;IACfC,UAAU;IACVC,iBAAiB,GAAG,IAAI;IACxBC,6BAA6B,GAAG,IAAI;IACpCC,eAAe,GAAG;EACpB,CAAC,GAAGjB,OAAO;;EAEX;EACA,MAAMkB,SAAS,GAAG,EAAE;EAEpB,MAAMC,OAAO,GAAGb,qBAAqB,GAAGc,SAAS,GAAG/C,cAAc;EAElE,MAAMgD,eAAe,GAAGf,qBAAqB,GAAGc,SAAS,GAAG9C,sBAAsB;EAElF,IAAI2B,gBAAgB,EAAE;IACpBA,gBAAgB,GAAGf,KAAK,CAACoC,kBAAkB,CAACrB,gBAAgB,CAAC;EAC/D;EAEA,IAAIC,sBAAsB,EAAE;IAC1BA,sBAAsB,GAAGhB,KAAK,CAACoC,kBAAkB,CAACpB,sBAAsB,CAAC;EAC3E;EAEA,MAAMqB,WAAW,GAAG,CAAC;IACnBC,QAAQ;IACRC,eAAe;IACfC,KAAK,GAAGL,eAAe;IACvBM,KAAK,GAAG,CAAC;IACTC,IAAI,GAAG,CAAC;IACRC,QAAQ;IACRC,MAAM;IACNC,aAAa;IACbC,OAAO,GAAG,EAAE;IACZC,GAAG,GAAG;MACJvC,IAAI,EAAE;IACR;EACF,CAAC,KAAK;IACJ,IAAI,CAACmC,QAAQ,EAAE;MACbG,OAAO,CAACE,IAAI,CAAC;QACXC,kBAAkB,EAAEP,IAAI;QACxBQ,mBAAmB,EAAET,KAAK;QAC1BU,MAAM,EAAEP;MACV,CAAC,CAAC;IACJ;;IAEA;IACA,MAAMQ,UAAU,GAAG,UAAU;MAC3BH,kBAAkB;MAClBC,mBAAmB;MACnBC;IACF,CAAC,EAAE;MACD,MAAME,SAAS,GAAG;QAChBxB,iBAAiB;QACjBF,UAAU;QACVC,UAAU;QACVE,6BAA6B;QAC7BE,SAAS;QACTQ,KAAK;QACLc,WAAW,EAAEjC;MACf,CAAC;MACD,MAAMkC,YAAY,GAAGC,IAAI,CAACC,SAAS,CAACJ,SAAS,CAAC;MAE9C,MAAMK,GAAG,GAAGhC,YAAY,GACtByB,MAAM,CAACtE,OAAO,CAAC,IAAII,MAAM,CAAE,WAAUyC,YAAa,QAAO,EAAE,IAAI,CAAC,EAAE,IAAI,CAAC,GACvEyB,MAAM;;MAER;MACA,MAAMQ,cAAc,GAAGrB,QAAQ,GAC7B,GAAG,GAAGiB,YAAY,GAAGjB,QAAQ,GAC7B,GAAG,GAAGiB,YAAY,GAAGhB,eAAe;MACtC,MAAMqB,IAAI,GAAGtB,QAAQ,IAAIC,eAAe;MACxC,IAAIsB,OAAO;MACX,IAAIjD,mBAAmB,CAACH,GAAG,CAACkD,cAAc,CAAC,EAAE;QAC3CE,OAAO,GAAGjD,mBAAmB,CAACC,GAAG,CAAC8C,cAAc,CAAC;MACnD,CAAC,MAAM;QACL,MAAMG,GAAG,GAAG,IAAIC,iBAAS,CAACV,SAAS,CAAC;QACpC,IAAIW,MAAM;QACV,IAAI1B,QAAQ,IAAIjB,aAAa,EAAE;UAC7B2C,MAAM,GAAGF,GAAG,CAACG,gBAAgB,CAACL,IAAI,CAAC;QACrC;;QAEA;QACA;QACA;QACAC,OAAO,GAAG,IAAIE,iBAAS,CAAC;UACtBlC,iBAAiB;UACjBF,UAAU,EAAE;YACV,GAAGA,UAAU;YACb,GAAGqC;UACL,CAAC;UACDpC,UAAU;UACVE,6BAA6B;UAC7BE,SAAS;UACTQ,KAAK;UACLc,WAAW,EAAE;QACf,CAAC,CAAC;QACF1C,mBAAmB,CAACF,GAAG,CAACiD,cAAc,EAAEE,OAAO,CAAC;MAClD;MAEA,MAAM;QACJK,OAAO,EAAE,CACP;UACEC;QACF,CAAC;MAEL,CAAC,GAAGN,OAAO,CAACO,aAAa,CAACV,GAAG,CAAC;MAE9B,IAAI,EAAE,MAAM,IAAIX,GAAG,CAAC,EAAE;QACpBA,GAAG,CAACvC,IAAI,GAAGuC,GAAG,CAACH,MAAM,CAAC,CAAC,CAAC,CAACyB,MAAM;MACjC;;MAEA;MACA,MAAMC,aAAa,GAAGvB,GAAG,CAACvC,IAAI,GAAG0C,mBAAmB;MACpD,MAAMqB,YAAY,GAAGhG,4BAA4B;MAEjD,KAAK,MAAM;QACTiG,OAAO;QACPhE,IAAI;QACJD,MAAM;QACNkE,QAAQ;QACRC;MACF,CAAC,IAAIP,QAAQ,EAAE;QACb,MAAMQ,SAAS,GAAGL,aAAa,GAAG9D,IAAI,GAAGlC,wBAAwB;QACjE,MAAMsG,QAAQ,GAAGL,YAAY;QAE3B;QACA/D,IAAI,IAAI,CAAC,GAAGyC,kBAAkB,GAAGxE,qBAAqB,GAAGD,iBAAiB,CAC3E,GAAG+B,MAAM;QAEVR,MAAM,CACJ,GAAG,GAAG8C,aAAa,GAAG,GAAG,IAAI4B,QAAQ,KAAK,CAAC,GAAG,OAAO,GAAG,SAAS,CAAC,IAC/DC,MAAM,GAAG,IAAI,GAAGA,MAAM,GAAG,GAAG,GAAG,EAAE,CAAC,GAAG,IAAI,GAC1CF,OAAO,EACT,IAAI,EACJ;UACEjE,MAAM,EAAEqE,QAAQ;UAChBpE,IAAI,EAAEmE;QACR,CAAC,CACF;MACH;IACF,CAAC;IAED,KAAK,MAAME,YAAY,IAAI/B,OAAO,EAAE;MAClCM,UAAU,CAACyB,YAAY,CAAC;IAC1B;EACF,CAAC;;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMC,eAAe,GAAG,CAACxC,QAAQ,EAAEyC,GAAG,GAAG,SAAS,KAAK;IACrD,IAAIxC,eAAe;IACnB,IAAI,CAACD,QAAQ,EAAE;MACb,MAAM0C,UAAU,GAAG/E,OAAO,CAACgF,WAAW,EAAE;MACxC,IAAI,OAAOD,UAAU,KAAK,QAAQ,IAAIA,UAAU,CAACE,QAAQ,CAAC,GAAG,CAAC,EAAE;QAC9D3C,eAAe,GAAGyC,UAAU,CAACnG,OAAO,CAAC,SAAS,EAAG,IAAGkG,GAAI,EAAC,CAAC;MAC5D,CAAC,MAAM;QACLxC,eAAe,GAAI,SAAQwC,GAAI,EAAC;MAClC;IACF;IAEA,OAAO;MACLxC,eAAe;MACfD;IACF,CAAC;EACH,CAAC;EAED,IAAIrB,aAAa,EAAE;IACjB,MAAMkE,YAAY,GAAGL,eAAe,CAACvD,wBAAwB,EAAE,gBAAgB,CAAC;IAChFvB,KAAK,CAACoF,mBAAmB,CAAC,SAAS,EAAE,CAACrC,GAAG,EAAEF,aAAa,KAAK;MAC3D,IAAI,CAACE,GAAG,CAACsC,WAAW,CAACC,IAAI,EAAE,EAAE;QAC3B;MACF;MAEAjD,WAAW,CAAC;QACVO,MAAM,EAAG,IAAG5C,KAAK,CAACuF,iBAAiB,CAACxC,GAAG,CAAE,GAAE;QAC3CF,aAAa;QACb,GAAGsC;MACL,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA,IAAIjE,WAAW,EAAE;IACf,MAAMiE,YAAY,GAAGL,eAAe,CAACtD,sBAAsB,EAAE,cAAc,CAAC;IAC5ExB,KAAK,CAACoF,mBAAmB,CAAC,OAAO,EAAE,CAACrC,GAAG,EAAEF,aAAa,KAAK;MACzD,IAAI,CAACE,GAAG,CAACyC,OAAO,IAAI,CAACzC,GAAG,CAACyC,OAAO,CAACF,IAAI,EAAE,EAAE;QACvC;MACF;MAEAjD,WAAW,CAAC;QACVO,MAAM,EAAG,IAAGG,GAAG,CAACyC,OAAQ,GAAE;QAC1B3C,aAAa;QACb,GAAGsC;MACL,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA,IAAIhE,eAAe,EAAE;IACnB,MAAMgE,YAAY,GAAGL,eAAe,CAACrD,0BAA0B,EAAE,kBAAkB,CAAC;IACpFzB,KAAK,CAACoF,mBAAmB,CAAC,UAAU,EAAE,CAACrC,GAAG,EAAEF,aAAa,KAAK;MAC5D,IAAI,CAACE,GAAG,CAACyC,OAAO,IAAI,CAACzC,GAAG,CAACyC,OAAO,CAACF,IAAI,EAAE,EAAE;QACvC;MACF;MAEAjD,WAAW,CAAC;QACVO,MAAM,EAAG,IAAGG,GAAG,CAACyC,OAAQ,GAAE;QAC1B3C,aAAa;QACb,GAAGsC;MACL,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA,MAAMM,OAAO,GAAGzF,KAAK,CAAC0F,mBAAmB,CAAC;IACxCD,OAAO,EAAE;EACX,CAAC,CAAC;EACF,IAAI,CAACzF,KAAK,CAAC2F,MAAM,CAACF,OAAO,CAAC,EAAE;IAC1B;EACF;EAEA,MAAMG,oBAAoB,GAAGd,eAAe,CAACxD,gBAAgB,CAAC;EAE9DtB,KAAK,CAACoF,mBAAmB,CAAC,SAAS,EAAE,CAACrC,GAAG,EAAEF,aAAa,KAAK;IAC3D,IAAID,MAAM,GAAG5C,KAAK,CAACuF,iBAAiB,CAACxC,GAAG,CAAC;IACzC,MAAM/D,KAAK,GAAG4D,MAAM,CAAC5D,KAAK,CAACN,eAAe,CAAC;IAE3C,IAAIqD,eAAe,KAAK,CAAC/C,KAAK,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,CAACsG,IAAI,EAAE,CAAC,EAAE;MACnDvF,MAAM,CAAC,mCAAmC,EAAE,IAAI,EAAEgD,GAAG,CAAC;IACxD;IAEAH,MAAM,GAAGA,MAAM,CAAC/D,OAAO,CAACH,eAAe,EAAE,EAAE,CAAC;IAC5C,MAAM,CACJ+D,KAAK,EACLC,IAAI,CACL,GAAG1D,KAAK,GAAGQ,YAAY,CAACR,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CACnC,CAAC,EAAE,CAAC,CACL;IAED,IAAI+B,gBAAgB,IAAI,CAACA,gBAAgB,CAAC8E,IAAI,CAACjD,MAAM,CAAC,IACpD5B,sBAAsB,IAAIA,sBAAsB,CAAC6E,IAAI,CAACjD,MAAM,CAAC,EAC7D;MACA;IACF;IAEA,MAAME,OAAO,GAAG,EAAE;IAClB,IAAIH,QAAQ,GAAG,KAAK;IACpB,IAAI5B,gBAAgB,EAAE;MACpB,IAAIkC,kBAAkB,GAAG,CAAC;MAC1B,IAAIC,mBAAmB,GAAG,CAAC;MAE3B,IAAI4C,aAAa,GAAG,CAAC;MACrB,IAAIC,eAAe,GAAG,CAAC;MAEvB,IAAIC,WAAW;MACfjF,gBAAgB,CAACkF,SAAS,GAAG,CAAC;MAC9B,OAAO,CAACD,WAAW,GAAGjF,gBAAgB,CAACmF,IAAI,CAACtD,MAAM,CAAC,MAAM,IAAI,EAAE;QAC7D,MAAM;UACJuD,KAAK;UACL,GAAG,EAAEC,EAAE;UACP,GAAG,EAAEC;QACP,CAAC,GAAGL,WAAW;;QAEf;QACA,MAAMM,QAAQ,GAAG1D,MAAM,CAAChD,KAAK,CAACkG,aAAa,EAAEK,KAAK,CAAC;QAEnD,MAAM,CACJI,aAAa,EACb5G,QAAQ,CACT,GAAGH,YAAY,CAAC8G,QAAQ,CAAC;QAE1B,IAAIE,YAAY;QAChB,IAAIC,qBAAqB;QACzB,IAAIJ,EAAE,EAAE;UACN,MAAMK,GAAG,GAAGN,EAAE,CAACO,OAAO,CAACN,EAAE,CAAC;UAC1BG,YAAY,GAAGJ,EAAE,CAACxG,KAAK,CAAC,CAAC,EAAE8G,GAAG,CAAC;UAC/BD,qBAAqB,GAAG3H,UAAU,CAAC0H,YAAY,EAAE,IAAI,CAAC;QACxD,CAAC,MAAM;UACLA,YAAY,GAAG,EAAE;UACjBC,qBAAqB,GAAG,CAAC;QAC3B;QAEAvD,mBAAmB,IAAI6C,eAAe,GAAGQ,aAAa,GAAGE,qBAAqB;;QAE9E;QACA,IAAIA,qBAAqB,EAAE;UACzB,MAAMG,eAAe,GAAGJ,YAAY,CAAC5G,KAAK,CAAC4G,YAAY,CAAC3G,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAACX,MAAM;UAErF+D,kBAAkB,IAAI2D,eAAe;QACvC,CAAC,MAAM;UACL3D,kBAAkB,IAAItD,QAAQ,GAAG6G,YAAY,CAACtH,MAAM;QACtD;QAEA,MAAMiE,MAAM,GAAGkD,EAAE,IAAID,EAAE;QACvBtD,OAAO,CAACE,IAAI,CAAC;UACXC,kBAAkB;UAClBC,mBAAmB;UACnBC;QACF,CAAC,CAAC;QACF2C,aAAa,GAAG/E,gBAAgB,CAACkF,SAAS;QAC1CF,eAAe,GAAGjH,UAAU,CAACqE,MAAM,EAAE,IAAI,CAAC;QAC1C,IAAI,CAACpC,gBAAgB,CAAC8F,MAAM,EAAE;UAC5B;QACF;MACF;MAEAlE,QAAQ,GAAG,IAAI;IACjB;IAEAN,WAAW,CAAC;MACVK,IAAI;MACJD,KAAK;MACLD,KAAK,EAAEP,OAAO;MACdU,QAAQ;MACRC,MAAM;MACNE,OAAO;MACPC,GAAG;MACHF,aAAa;MACb,GAAG+C;IACL,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,EAAE;EACDkB,gBAAgB,EAAE,IAAI;EACtBC,IAAI,EAAE;IACJC,IAAI,EAAE;MACJ3B,WAAW,EAAE,yEAAyE;MACtF4B,GAAG,EAAE;IACP,CAAC;IACDC,MAAM,EAAE,CACN;MACEC,oBAAoB,EAAE,KAAK;MAC3BC,UAAU,EAAE;QACVvF,iBAAiB,EAAE;UACjB2D,OAAO,EAAE,IAAI;UACb6B,IAAI,EAAE;QACR,CAAC;QACD1F,UAAU,EAAE;UACV0F,IAAI,EAAE;QACR,CAAC;QACDtF,eAAe,EAAE;UACfyD,OAAO,EAAE,KAAK;UACd6B,IAAI,EAAE;QACR,CAAC;QACDpG,aAAa,EAAE;UACbuE,OAAO,EAAE,KAAK;UACd6B,IAAI,EAAE;QACR,CAAC;QACDhG,aAAa,EAAE;UACbmE,OAAO,EAAE,IAAI;UACb6B,IAAI,EAAE;QACR,CAAC;QACDnG,WAAW,EAAE;UACXsE,OAAO,EAAE,KAAK;UACd6B,IAAI,EAAE;QACR,CAAC;QACDlG,eAAe,EAAE;UACfqE,OAAO,EAAE,KAAK;UACd6B,IAAI,EAAE;QACR,CAAC;QACDzF,UAAU,EAAE;UACVyF,IAAI,EAAE;QACR,CAAC;QACDtG,gBAAgB,EAAE;UAChBsG,IAAI,EAAE;QACR,CAAC;QACD/F,gBAAgB,EAAE;UAChB+F,IAAI,EAAE;QACR,CAAC;QACD9F,wBAAwB,EAAE;UACxB8F,IAAI,EAAE;QACR,CAAC;QACD7F,sBAAsB,EAAE;UACtB6F,IAAI,EAAE;QACR,CAAC;QACD5F,0BAA0B,EAAE;UAC1B4F,IAAI,EAAE;QACR,CAAC;QACDjG,qBAAqB,EAAE;UACrBoE,OAAO,EAAE,KAAK;UACd6B,IAAI,EAAE;QACR,CAAC;QACD3F,YAAY,EAAE;UACZ8D,OAAO,EAAE,CAAC;UACV6B,IAAI,EAAE;QACR,CAAC;QACDrG,sBAAsB,EAAE;UACtBqG,IAAI,EAAE;QACR,CAAC;QACDvF,6BAA6B,EAAE;UAC7B0D,OAAO,EAAE,IAAI;UACb6B,IAAI,EAAE;QACR;MACF,CAAC;MACDA,IAAI,EAAE;IACR,CAAC,CACF;IACDA,IAAI,EAAE;EACR;AACF,CAAC,CAAC;AAAA;AAAA"}