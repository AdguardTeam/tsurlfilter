import { ILookupTable } from './lookup-table';
import { RuleStorage } from '../../filterlist/rule-storage';
import { Request } from '../../request';
import { NetworkRule } from '../../rules/network-rule';
/**
 * Domain lookup table. Key is the domain name hash.
 */
export declare class DomainsLookupTable implements ILookupTable {
    /**
     * Count of rules added to this lookup table.
     */
    private rulesCount;
    /**
     * Domain lookup table. Key is the domain name hash.
     */
    private readonly domainsLookupTable;
    /**
     * Storage for the network filtering rules
     */
    private readonly ruleStorage;
    /**
     * Creates a new instance
     *
     * @param storage rules storage. We store "rule indexes" in the lookup table which
     * can be used to retrieve the full rules from the storage.
     */
    constructor(storage: RuleStorage);
    /**
     * addRule implements the ILookupTable interface for DomainsLookupTable.
     * @param rule
     * @param storageIdx
     */
    addRule(rule: NetworkRule, storageIdx: number): boolean;
    /**
     * Implements the ILookupTable interface method.
     */
    getRulesCount(): number;
    /**
     * Implements the ILookupTable interface method.
     * @param request
     */
    matchAll(request: Request): NetworkRule[];
}
