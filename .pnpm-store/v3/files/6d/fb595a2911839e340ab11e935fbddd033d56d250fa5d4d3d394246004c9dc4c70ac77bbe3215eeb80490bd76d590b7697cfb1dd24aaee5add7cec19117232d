import { RuleScanner } from './rule-scanner';
import { IndexedStorageRule } from '../../rules/rule';
/**
 * RuleStorageScanner scans multiple RuleScanner instances
 * The rule index is built from the rule index in the list + the list ID
 * In the index number we consider decimal part as listId and integer part as ruleId
*/
export declare class RuleStorageScanner {
    /**
     * Scanners is the list of list scanners backing this combined scanner
     */
    private readonly scanners;
    /**
     * Current scanner
     */
    private currentScanner;
    /**
     * Index of the current scanner
     */
    private currentScannerIdx;
    /**
     * Constructor
     *
     * @param scanners
     */
    constructor(scanners: RuleScanner[]);
    /**
     * Scan advances the RuleStorageScanner to the next rule, which will then be available
     * through the Rule method. It returns false when the scan stops, either by
     * reaching the end of the input or an error.
     *
     * @return true if there is some result
    */
    scan(): boolean;
    /**
     * Rule returns the most recent rule generated by a call to Scan, and the index of this rule.
     * See ruleListIdxToStorageIdx for more information on what this index is.
    */
    getRule(): IndexedStorageRule | null;
    /**
     * ruleListIdxToStorageIdx converts pair of listID and rule list index
     * to "storage index" number
     *
     * @param listId
     * @param ruleIdx
     */
    private static ruleListIdxToStorageIdx;
    /**
     * Converts the "storage index" to two integers:
     * listID -- rule list identifier
     * ruleIdx -- index of the rule in the list
     *
     * @param storageIdx
     * @return [listId, ruleIdx]
     */
    static storageIdxToRuleListIdx(storageIdx: number): [number, number];
}
