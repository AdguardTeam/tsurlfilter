{"version":3,"file":"requireHyphenBeforeParamDescription.js","names":["iterateJsdoc","sourceCode","utils","report","context","jsdoc","jsdocNode","mainCircumstance","tags","options","checkHyphens","jsdocTag","targetTagName","circumstance","always","desc","getTagDescription","trim","startsWithHyphen","test","fixer","lineIndex","line","sourceLines","getText","split","description","descriptionIndex","lastIndexOf","replacementLine","slice","splice","replacement","join","replaceText","unwantedPart","exec","replace","length","forEachPreferredTag","tagEntries","Object","entries","tagName","preferredParamTag","getPreferredTagName","tag","some","tagNme","iterateAllJsdocs","meta","docs","url","fixable","schema","enum","type","additionalProperties","properties","anyOf","patternProperties"],"sources":["../../src/rules/requireHyphenBeforeParamDescription.js"],"sourcesContent":["import iterateJsdoc from '../iterateJsdoc';\n\nexport default iterateJsdoc(({\n  sourceCode,\n  utils,\n  report,\n  context,\n  jsdoc,\n  jsdocNode,\n}) => {\n  const [\n    mainCircumstance,\n    {\n      tags,\n    } = {},\n  ] = context.options;\n\n  const checkHyphens = (jsdocTag, targetTagName, circumstance = mainCircumstance) => {\n    const always = !circumstance || circumstance === 'always';\n    const desc = utils.getTagDescription(jsdocTag);\n    if (!desc.trim()) {\n      return;\n    }\n\n    const startsWithHyphen = (/^\\s*-/u).test(desc);\n    if (always) {\n      if (!startsWithHyphen) {\n        report(`There must be a hyphen before @${targetTagName} description.`, (fixer) => {\n          const lineIndex = jsdocTag.line;\n          const sourceLines = sourceCode.getText(jsdocNode).split('\\n');\n\n          // Get start index of description, accounting for multi-line descriptions\n          const description = desc.split('\\n')[0];\n          const descriptionIndex = sourceLines[lineIndex].lastIndexOf(description);\n\n          const replacementLine = sourceLines[lineIndex]\n            .slice(0, descriptionIndex) + '- ' + description;\n          sourceLines.splice(lineIndex, 1, replacementLine);\n          const replacement = sourceLines.join('\\n');\n\n          return fixer.replaceText(jsdocNode, replacement);\n        }, jsdocTag);\n      }\n    } else if (startsWithHyphen) {\n      report(`There must be no hyphen before @${targetTagName} description.`, (fixer) => {\n        const [\n          unwantedPart,\n        ] = /^\\s*-\\s*/u.exec(desc);\n\n        const replacement = sourceCode\n          .getText(jsdocNode)\n          .replace(desc, desc.slice(unwantedPart.length));\n\n        return fixer.replaceText(jsdocNode, replacement);\n      }, jsdocTag);\n    }\n  };\n\n  utils.forEachPreferredTag('param', checkHyphens);\n  if (tags) {\n    const tagEntries = Object.entries(tags);\n    for (const [\n      tagName,\n      circumstance,\n    ] of tagEntries) {\n      if (tagName === '*') {\n        const preferredParamTag = utils.getPreferredTagName({\n          tagName: 'param',\n        });\n        for (const {\n          tag,\n        } of jsdoc.tags) {\n          if (tag === preferredParamTag || tagEntries.some(([\n            tagNme,\n          ]) => {\n            return tagNme !== '*' && tagNme === tag;\n          })) {\n            continue;\n          }\n\n          utils.forEachPreferredTag(tag, (jsdocTag, targetTagName) => {\n            checkHyphens(jsdocTag, targetTagName, circumstance);\n          });\n        }\n\n        continue;\n      }\n\n      utils.forEachPreferredTag(tagName, (jsdocTag, targetTagName) => {\n        checkHyphens(jsdocTag, targetTagName, circumstance);\n      });\n    }\n  }\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    docs: {\n      description: 'Requires a hyphen before the `@param` description.',\n      url: 'https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-require-hyphen-before-param-description',\n    },\n    fixable: 'code',\n    schema: [\n      {\n        enum: [\n          'always', 'never',\n        ],\n        type: 'string',\n      },\n      {\n        additionalProperties: false,\n        properties: {\n          tags: {\n            anyOf: [\n              {\n                patternProperties: {\n                  '.*': {\n                    enum: [\n                      'always', 'never',\n                    ],\n                    type: 'string',\n                  },\n                },\n                type: 'object',\n              },\n              {\n                enum: [\n                  'any',\n                ],\n                type: 'string',\n              },\n            ],\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'layout',\n  },\n});\n"],"mappings":"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"}