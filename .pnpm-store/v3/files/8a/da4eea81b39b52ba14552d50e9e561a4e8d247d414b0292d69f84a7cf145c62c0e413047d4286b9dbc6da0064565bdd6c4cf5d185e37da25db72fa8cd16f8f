import { DeclarativeRule } from './declarative-rule';
import { IRuleList } from '../../filterlist/rule-list';
interface IConvertOptions {
    resoursesPath?: string;
    maxLimit?: number;
    maxRegexLimit?: number;
}
/**
 * Converter class
 * Provides a functionality of conversion AG rules to declarative rules.
 */
export declare class DeclarativeConverter {
    /**
     * Converts a set of rules to declarative rules array
     *
     * @param ruleList
     * @param options
     */
    convert(ruleList: IRuleList, options?: IConvertOptions): DeclarativeRule[];
    /**
     * A lot of rules don't make any sense in declarative context.
     * So here we check if rule is suitable for declarative syntax or not.
     *
     * We skip some single option rules like ($elemhide, $jsinject, $generichide etc)
     * @param rule
     */
    private static isRuleApplicable;
    /**
     * Creates declarative rule identifier
     * An id which uniquely identifies a rule. Mandatory and should be >= 1.
     *
     * @param index rule list index
     */
    private static createDeclarativeRuleId;
}
export {};
