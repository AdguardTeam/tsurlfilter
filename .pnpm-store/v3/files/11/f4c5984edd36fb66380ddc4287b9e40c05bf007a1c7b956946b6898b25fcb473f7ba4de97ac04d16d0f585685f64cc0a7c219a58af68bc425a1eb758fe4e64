{"version":3,"file":"newlineAfterDescription.js","names":["iterateJsdoc","jsdoc","report","context","jsdocNode","sourceCode","indent","utils","always","description","trim","tags","length","options","lastDescriptionLine","getDescription","descriptionEndsWithANewline","test","sourceLines","getText","split","fixer","injectedLine","endsWith","splice","replaceText","join","line","iterateAllJsdocs","meta","docs","url","fixable","schema","enum","type"],"sources":["../../src/rules/newlineAfterDescription.js"],"sourcesContent":["import iterateJsdoc from '../iterateJsdoc';\n\nexport default iterateJsdoc(({\n  jsdoc,\n  report,\n  context,\n  jsdocNode,\n  sourceCode,\n  indent,\n  utils,\n}) => {\n  let always;\n\n  if (!jsdoc.description.trim() || !jsdoc.tags.length) {\n    return;\n  }\n\n  if (0 in context.options) {\n    always = context.options[0] === 'always';\n  } else {\n    always = true;\n  }\n\n  const {\n    description,\n    lastDescriptionLine,\n  } = utils.getDescription();\n  const descriptionEndsWithANewline = (/\\n\\r?$/u).test(description);\n\n  if (always) {\n    if (!descriptionEndsWithANewline) {\n      const sourceLines = sourceCode.getText(jsdocNode).split('\\n');\n\n      report('There must be a newline after the description of the JSDoc block.', (fixer) => {\n        // Add the new line\n        const injectedLine = `${indent} *` +\n          (sourceLines[lastDescriptionLine].endsWith('\\r') ? '\\r' : '');\n        sourceLines.splice(lastDescriptionLine + 1, 0, injectedLine);\n\n        return fixer.replaceText(jsdocNode, sourceLines.join('\\n'));\n      }, {\n        line: lastDescriptionLine,\n      });\n    }\n  } else if (descriptionEndsWithANewline) {\n    const sourceLines = sourceCode.getText(jsdocNode).split('\\n');\n    report('There must be no newline after the description of the JSDoc block.', (fixer) => {\n      // Remove the extra line\n      sourceLines.splice(lastDescriptionLine, 1);\n\n      return fixer.replaceText(jsdocNode, sourceLines.join('\\n'));\n    }, {\n      line: lastDescriptionLine,\n    });\n  }\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    docs: {\n      description: 'Enforces a consistent padding of the block description.',\n      url: 'https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-newline-after-description',\n    },\n    fixable: 'whitespace',\n    schema: [\n      {\n        enum: [\n          'always', 'never',\n        ],\n        type: 'string',\n      },\n    ],\n    type: 'layout',\n  },\n});\n"],"mappings":";;;;;;AAAA;AAA2C;AAAA,eAE5B,IAAAA,qBAAY,EAAC,CAAC;EAC3BC,KAAK;EACLC,MAAM;EACNC,OAAO;EACPC,SAAS;EACTC,UAAU;EACVC,MAAM;EACNC;AACF,CAAC,KAAK;EACJ,IAAIC,MAAM;EAEV,IAAI,CAACP,KAAK,CAACQ,WAAW,CAACC,IAAI,EAAE,IAAI,CAACT,KAAK,CAACU,IAAI,CAACC,MAAM,EAAE;IACnD;EACF;EAEA,IAAI,CAAC,IAAIT,OAAO,CAACU,OAAO,EAAE;IACxBL,MAAM,GAAGL,OAAO,CAACU,OAAO,CAAC,CAAC,CAAC,KAAK,QAAQ;EAC1C,CAAC,MAAM;IACLL,MAAM,GAAG,IAAI;EACf;EAEA,MAAM;IACJC,WAAW;IACXK;EACF,CAAC,GAAGP,KAAK,CAACQ,cAAc,EAAE;EAC1B,MAAMC,2BAA2B,GAAI,SAAS,CAAEC,IAAI,CAACR,WAAW,CAAC;EAEjE,IAAID,MAAM,EAAE;IACV,IAAI,CAACQ,2BAA2B,EAAE;MAChC,MAAME,WAAW,GAAGb,UAAU,CAACc,OAAO,CAACf,SAAS,CAAC,CAACgB,KAAK,CAAC,IAAI,CAAC;MAE7DlB,MAAM,CAAC,mEAAmE,EAAGmB,KAAK,IAAK;QACrF;QACA,MAAMC,YAAY,GAAI,GAAEhB,MAAO,IAAG,IAC/BY,WAAW,CAACJ,mBAAmB,CAAC,CAACS,QAAQ,CAAC,IAAI,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC;QAC/DL,WAAW,CAACM,MAAM,CAACV,mBAAmB,GAAG,CAAC,EAAE,CAAC,EAAEQ,YAAY,CAAC;QAE5D,OAAOD,KAAK,CAACI,WAAW,CAACrB,SAAS,EAAEc,WAAW,CAACQ,IAAI,CAAC,IAAI,CAAC,CAAC;MAC7D,CAAC,EAAE;QACDC,IAAI,EAAEb;MACR,CAAC,CAAC;IACJ;EACF,CAAC,MAAM,IAAIE,2BAA2B,EAAE;IACtC,MAAME,WAAW,GAAGb,UAAU,CAACc,OAAO,CAACf,SAAS,CAAC,CAACgB,KAAK,CAAC,IAAI,CAAC;IAC7DlB,MAAM,CAAC,oEAAoE,EAAGmB,KAAK,IAAK;MACtF;MACAH,WAAW,CAACM,MAAM,CAACV,mBAAmB,EAAE,CAAC,CAAC;MAE1C,OAAOO,KAAK,CAACI,WAAW,CAACrB,SAAS,EAAEc,WAAW,CAACQ,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7D,CAAC,EAAE;MACDC,IAAI,EAAEb;IACR,CAAC,CAAC;EACJ;AACF,CAAC,EAAE;EACDc,gBAAgB,EAAE,IAAI;EACtBC,IAAI,EAAE;IACJC,IAAI,EAAE;MACJrB,WAAW,EAAE,yDAAyD;MACtEsB,GAAG,EAAE;IACP,CAAC;IACDC,OAAO,EAAE,YAAY;IACrBC,MAAM,EAAE,CACN;MACEC,IAAI,EAAE,CACJ,QAAQ,EAAE,OAAO,CAClB;MACDC,IAAI,EAAE;IACR,CAAC,CACF;IACDA,IAAI,EAAE;EACR;AACF,CAAC,CAAC;AAAA;AAAA"}