/**
 * String source for filter content.
 */
declare type IStringSourceProvider = {
    getContent: () => Promise<string[]>;
};
/**
 * Describe filter with original rules.
 */
export interface IFilter {
    getId(): number;
    getRuleByIndex(index: number): Promise<string>;
    getContent(): Promise<string[]>;
}
/**
 * Saves the original rules and can return all original rules or just one,
 * with lazy content loading.
 */
export declare class Filter implements IFilter {
    private readonly id;
    private content;
    private source;
    /**
     * Creates new FilterList.
     *
     * @param id Number id of filter.
     * @param source Provider of filter content.
     */
    constructor(id: number, source: IStringSourceProvider);
    /**
     * Filter id.
     *
     * @returns Filter id.
     */
    getId(): number;
    /**
     * Loads content from provider to source.
     */
    private loadContent;
    /**
     * Returns original filtering rule by provided id with lazy load.
     *
     * @param index Rule index.
     *
     * @throws Error {@link UnavailableFilterSourceError} if content is
     * not available.
     *
     * @returns Original filtering rule by provided identifier.
     */
    getRuleByIndex(index: number): Promise<string>;
    /**
     * Returns the original filter rules with lazy loading.
     *
     * @throws UnavailableFilterSourceError if content is not available.
     *
     * @returns List of original filter rules.
     */
    getContent(): Promise<string[]>;
}
export {};
