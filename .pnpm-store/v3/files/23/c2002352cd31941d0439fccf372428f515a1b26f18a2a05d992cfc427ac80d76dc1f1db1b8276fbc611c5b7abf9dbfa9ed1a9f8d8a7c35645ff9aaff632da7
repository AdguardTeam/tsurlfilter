import { Request } from '../request';
import { NetworkRule } from '../rules/network-rule';
import { RuleStorage } from '../filterlist/rule-storage';
/**
 * NetworkEngine is the engine that supports quick search over network rules
 */
export declare class NetworkEngine {
    /**
     * Count of rules added to the engine
     */
    rulesCount: number;
    /**
     * Storage for the network filtering rules
     */
    private ruleStorage;
    /**
     * Domain lookup table. Key is the domain name hash.
     */
    private readonly domainsLookupTable;
    /**
     * Lookup table that relies on the rule shortcuts to speed up the search.
     */
    private readonly shortcutsLookupTable;
    /**
     * Lookup table for rules like '||hostname^' or '||hostname/path'
     */
    private readonly hostnameLookupTable;
    /**
     * Rules for which we could not find a shortcut and could not place it to the shortcuts lookup table.
     */
    private readonly seqScanLookupTable;
    /**
     * Builds an instance of the network engine
     *
     * @param storage an object for a rules storage.
     * @param skipStorageScan create an instance without storage scanning.
     */
    constructor(storage: RuleStorage, skipStorageScan?: boolean);
    /**
     * Match searches over all filtering rules loaded to the engine
     * It returns rule if a match was found alongside the matching rule
     *
     * @param request to check
     * @return rule matching request or null
     */
    match(request: Request): NetworkRule | null;
    /**
     * Finds all rules matching the specified request regardless of the rule types
     * It will find both allowlist and blacklist rules
     *
     * @param request to check
     * @return array of matching rules
     */
    matchAll(request: Request): NetworkRule[];
    /**
     * Adds rule to the network engine
     *
     * @param rule
     * @param storageIdx
     */
    addRule(rule: NetworkRule, storageIdx: number): void;
}
