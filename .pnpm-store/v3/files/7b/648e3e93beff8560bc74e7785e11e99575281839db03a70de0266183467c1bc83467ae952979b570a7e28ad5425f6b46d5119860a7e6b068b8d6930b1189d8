import { StreamFilter } from './stream-filter';
import { CosmeticRule } from '../rules/cosmetic-rule';
import { NetworkRule } from '../rules/network-rule';
import { ModificationsListener } from './modifications-listener';
import { RequestContext } from './request-context';
/**
 * Content filtering module
 * Handles Html filtering and replace rules
 */
export declare class ContentFiltering {
    /**
     * Filtering log
     */
    private readonly modificationsListener;
    /**
     * Constructor
     *
     * @param modificationsListener
     */
    constructor(modificationsListener: ModificationsListener);
    /**
     * Document parser
     */
    private documentParser;
    /**
     * For correctly applying replace or content rules we have to work with the whole response content.
     * This function allows read response fully.
     * See some details here: https://mail.mozilla.org/pipermail/dev-addons/2017-April/002729.html
     *
     * @param requestContext
     * @param streamFilter
     * @param htmlRules
     * @param replaceRules
     * @param callback
     */
    private handleResponse;
    /**
     * Checks if the request should be processed
     *
     * @param context
     * @param charset
     */
    private static shouldProcessRequest;
    /**
     * Applies Html rules to the document.
     * If document wasn't modified then method will return null
     *
     * @param context Request context
     * @param {object} doc Document
     * @param {Array} rules Content rules
     * @returns null or document html
     */
    private applyHtmlRules;
    /**
     * Applies replace rules to content
     *
     * @param context
     * @param content
     * @param replaceRules
     */
    private applyReplaceRules;
    /**
     * Applies replace/content rules to the content
     *
     * @param context
     * @param {string} content
     * @param replaceRules
     * @param htmlRules
     * @param replaceRules
     * @param htmlRules
     * @returns {string} Modified content
     */
    private applyRulesToContent;
    /**
     * OnBeforeRequest handler
     *
     * @param streamFilter
     * @param requestContext
     * @param replaceRules
     * @param htmlRules
     */
    onBeforeRequest(streamFilter: StreamFilter, requestContext: RequestContext, replaceRules: NetworkRule[], htmlRules: CosmeticRule[]): void;
}
