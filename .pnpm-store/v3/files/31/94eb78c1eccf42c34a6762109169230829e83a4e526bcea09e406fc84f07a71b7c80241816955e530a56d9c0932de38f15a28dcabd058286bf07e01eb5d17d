"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.load = exports.resolve = exports.getPackageType = void 0;
const promises_1 = require("fs/promises");
const node_module_1 = require("node:module");
const path_1 = require("path");
const url_1 = require("url");
const debug_1 = __importDefault(require("debug"));
const typescript_1 = __importDefault(require("typescript"));
// @ts-expect-error
const read_default_tsconfig_js_1 = require("../lib/read-default-tsconfig.js");
// @ts-expect-error
const register_js_1 = require("../lib/register.js");
const debug = (0, debug_1.default)('@swc-node');
const tsconfig = (0, read_default_tsconfig_js_1.readDefaultTsConfig)();
tsconfig.module = typescript_1.default.ModuleKind.ESNext;
const moduleResolutionCache = typescript_1.default.createModuleResolutionCache(typescript_1.default.sys.getCurrentDirectory(), (x) => x, tsconfig);
const host = {
    fileExists: typescript_1.default.sys.fileExists,
    readFile: typescript_1.default.sys.readFile,
};
const addShortCircuitSignal = (input) => {
    return {
        ...input,
        shortCircuit: true,
    };
};
const packageJSONCache = new Map();
const readFileIfExists = async (path) => {
    try {
        const content = await (0, promises_1.readFile)(path, 'utf-8');
        return JSON.parse(content);
    }
    catch (e) {
        // eslint-disable-next-line no-undef
        if (e.code === 'ENOENT') {
            return undefined;
        }
        throw e;
    }
};
const readPackageJSON = async (path) => {
    if (packageJSONCache.has(path)) {
        return packageJSONCache.get(path);
    }
    const res = (await readFileIfExists(path));
    packageJSONCache.set(path, res);
    return res;
};
const getPackageForFile = async (url) => {
    // use URL instead path.resolve to handle relative path
    let packageJsonURL = new URL('./package.json', url);
    // eslint-disable-next-line no-constant-condition
    while (true) {
        const path = (0, url_1.fileURLToPath)(packageJsonURL);
        // for special case by some package manager
        if (path.endsWith('node_modules/package.json')) {
            break;
        }
        const packageJson = await readPackageJSON(path);
        if (!packageJson) {
            const lastPath = packageJsonURL.pathname;
            packageJsonURL = new URL('../package.json', packageJsonURL);
            // root level /package.json
            if (packageJsonURL.pathname === lastPath) {
                break;
            }
            continue;
        }
        if (packageJson.type && packageJson.type !== 'module' && packageJson.type !== 'commonjs') {
            packageJson.type = undefined;
        }
        return packageJson;
    }
    return undefined;
};
const getPackageType = async (url) => {
    var _a;
    const packageJson = await getPackageForFile(url);
    return (_a = packageJson === null || packageJson === void 0 ? void 0 : packageJson.type) !== null && _a !== void 0 ? _a : undefined;
};
exports.getPackageType = getPackageType;
const INTERNAL_MODULE_PATTERN = /^(node|nodejs):/;
const EXTENSION_MODULE_MAP = {
    '.mjs': 'module',
    '.cjs': 'commonjs',
    '.ts': 'module',
    '.mts': 'module',
    '.cts': 'commonjs',
    '.json': 'json',
    '.wasm': 'wasm',
    '.node': 'commonjs',
};
const resolve = async (specifier, context, nextResolve) => {
    var _a;
    debug('resolve', specifier, JSON.stringify(context));
    if (INTERNAL_MODULE_PATTERN.test(specifier)) {
        debug('skip resolve: internal format', specifier);
        return addShortCircuitSignal({
            url: specifier,
            format: 'builtin',
        });
    }
    if (specifier.startsWith('data:')) {
        debug('skip resolve: data url', specifier);
        return addShortCircuitSignal({
            url: specifier,
        });
    }
    const parsedUrl = (0, url_1.parse)(specifier);
    // as entrypoint, just return specifier
    if (!context.parentURL || parsedUrl.protocol === 'file:') {
        debug('skip resolve: absolute path or entrypoint', specifier);
        let format = null;
        const specifierPath = (0, url_1.fileURLToPath)(specifier);
        const ext = (0, path_1.extname)(specifierPath);
        if (ext === '.js') {
            format = (await (0, exports.getPackageType)(specifier)) === 'module' ? 'module' : 'commonjs';
        }
        else {
            format = EXTENSION_MODULE_MAP[ext];
        }
        return addShortCircuitSignal({
            url: specifier,
            format,
        });
    }
    // import attributes, support json currently
    if ((_a = context.importAttributes) === null || _a === void 0 ? void 0 : _a.type) {
        debug('skip resolve: import attributes', specifier);
        return addShortCircuitSignal(await nextResolve(specifier));
    }
    const { resolvedModule } = typescript_1.default.resolveModuleName(specifier.startsWith('file:') ? (0, url_1.fileURLToPath)(specifier) : specifier, (0, url_1.fileURLToPath)(context.parentURL), tsconfig, host, moduleResolutionCache);
    // local project file
    if (resolvedModule &&
        !resolvedModule.resolvedFileName.includes('/node_modules/') &&
        register_js_1.AVAILABLE_TS_EXTENSION_PATTERN.test(resolvedModule.resolvedFileName)) {
        debug('resolved: typescript', specifier, resolvedModule.resolvedFileName);
        return addShortCircuitSignal({
            ...context,
            url: (0, url_1.pathToFileURL)(resolvedModule.resolvedFileName).href,
            format: 'module',
        });
    }
    try {
        // files could not resolved by typescript or resolved as dts, fallback to use node resolver
        const res = await nextResolve(specifier);
        debug('resolved: fallback node', specifier, res.url, res.format);
        return addShortCircuitSignal(res);
    }
    catch (resolveError) {
        // fallback to cjs resolve as may import non-esm files
        try {
            const resolution = (0, url_1.pathToFileURL)((0, node_module_1.createRequire)(process.cwd()).resolve(specifier)).toString();
            debug('resolved: fallback commonjs', specifier, resolution);
            return addShortCircuitSignal({
                format: 'commonjs',
                url: resolution,
            });
        }
        catch (error) {
            debug('resolved by cjs error', specifier, error);
            throw resolveError;
        }
    }
};
exports.resolve = resolve;
const tsconfigForSWCNode = {
    ...tsconfig,
    paths: undefined,
    baseUrl: undefined,
};
const load = async (url, context, nextLoad) => {
    debug('load', url, JSON.stringify(context));
    if (url.startsWith('data:')) {
        debug('skip load: data url', url);
        return nextLoad(url, context);
    }
    if (['builtin', 'json', 'wasm'].includes(context.format)) {
        debug('loaded: internal format', url);
        return nextLoad(url, context);
    }
    const { source, format: resolvedFormat } = await nextLoad(url, context);
    debug('loaded', url, resolvedFormat);
    const code = !source || typeof source === 'string' ? source : Buffer.from(source).toString();
    const compiled = await (0, register_js_1.compile)(code, url, tsconfigForSWCNode, true);
    debug('compiled', url, resolvedFormat);
    return addShortCircuitSignal({
        // for lazy: ts-node think format would undefined, actually it should not, keep it as original temporarily
        format: resolvedFormat,
        source: compiled,
    });
};
exports.load = load;
//# sourceMappingURL=esm.mjs.map