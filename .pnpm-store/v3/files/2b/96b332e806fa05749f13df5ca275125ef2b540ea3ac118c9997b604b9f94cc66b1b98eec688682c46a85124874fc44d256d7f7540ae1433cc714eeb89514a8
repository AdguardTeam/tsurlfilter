{"version":3,"file":"requireHyphenBeforeParamDescription.js","names":["iterateJsdoc","sourceCode","utils","report","context","jsdoc","jsdocNode","mainCircumstance","tags","options","checkHyphens","jsdocTag","targetTagName","circumstance","always","desc","getTagDescription","trim","startsWithHyphen","test","fixer","lineIndex","line","sourceLines","getText","split","description","descriptionIndex","lastIndexOf","replacementLine","slice","splice","replacement","join","replaceText","unwantedPart","exec","replace","length","forEachPreferredTag","tagEntries","Object","entries","tagName","preferredParamTag","getPreferredTagName","tag","some","tagNme","iterateAllJsdocs","meta","docs","url","fixable","schema","enum","type","additionalProperties","properties","anyOf","patternProperties"],"sources":["../../src/rules/requireHyphenBeforeParamDescription.js"],"sourcesContent":["import iterateJsdoc from '../iterateJsdoc';\n\nexport default iterateJsdoc(({\n  sourceCode,\n  utils,\n  report,\n  context,\n  jsdoc,\n  jsdocNode,\n}) => {\n  const [\n    mainCircumstance,\n    {\n      tags,\n    } = {},\n  ] = context.options;\n\n  const checkHyphens = (jsdocTag, targetTagName, circumstance = mainCircumstance) => {\n    const always = !circumstance || circumstance === 'always';\n    const desc = utils.getTagDescription(jsdocTag);\n    if (!desc.trim()) {\n      return;\n    }\n\n    const startsWithHyphen = (/^\\s*-/u).test(desc);\n    if (always) {\n      if (!startsWithHyphen) {\n        report(`There must be a hyphen before @${targetTagName} description.`, (fixer) => {\n          const lineIndex = jsdocTag.line;\n          const sourceLines = sourceCode.getText(jsdocNode).split('\\n');\n\n          // Get start index of description, accounting for multi-line descriptions\n          const description = desc.split('\\n')[0];\n          const descriptionIndex = sourceLines[lineIndex].lastIndexOf(description);\n\n          const replacementLine = sourceLines[lineIndex]\n            .slice(0, descriptionIndex) + '- ' + description;\n          sourceLines.splice(lineIndex, 1, replacementLine);\n          const replacement = sourceLines.join('\\n');\n\n          return fixer.replaceText(jsdocNode, replacement);\n        }, jsdocTag);\n      }\n    } else if (startsWithHyphen) {\n      report(`There must be no hyphen before @${targetTagName} description.`, (fixer) => {\n        const [\n          unwantedPart,\n        ] = /^\\s*-\\s*/u.exec(desc);\n\n        const replacement = sourceCode\n          .getText(jsdocNode)\n          .replace(desc, desc.slice(unwantedPart.length));\n\n        return fixer.replaceText(jsdocNode, replacement);\n      }, jsdocTag);\n    }\n  };\n\n  utils.forEachPreferredTag('param', checkHyphens);\n  if (tags) {\n    const tagEntries = Object.entries(tags);\n    for (const [\n      tagName,\n      circumstance,\n    ] of tagEntries) {\n      if (tagName === '*') {\n        const preferredParamTag = utils.getPreferredTagName({\n          tagName: 'param',\n        });\n        for (const {\n          tag,\n        } of jsdoc.tags) {\n          if (tag === preferredParamTag || tagEntries.some(([\n            tagNme,\n          ]) => {\n            return tagNme !== '*' && tagNme === tag;\n          })) {\n            continue;\n          }\n\n          utils.forEachPreferredTag(tag, (jsdocTag, targetTagName) => {\n            checkHyphens(jsdocTag, targetTagName, circumstance);\n          });\n        }\n\n        continue;\n      }\n\n      utils.forEachPreferredTag(tagName, (jsdocTag, targetTagName) => {\n        checkHyphens(jsdocTag, targetTagName, circumstance);\n      });\n    }\n  }\n}, {\n  iterateAllJsdocs: true,\n  meta: {\n    docs: {\n      description: 'Requires a hyphen before the `@param` description.',\n      url: 'https://github.com/gajus/eslint-plugin-jsdoc#eslint-plugin-jsdoc-rules-require-hyphen-before-param-description',\n    },\n    fixable: 'code',\n    schema: [\n      {\n        enum: [\n          'always', 'never',\n        ],\n        type: 'string',\n      },\n      {\n        additionalProperties: false,\n        properties: {\n          tags: {\n            anyOf: [\n              {\n                patternProperties: {\n                  '.*': {\n                    enum: [\n                      'always', 'never',\n                    ],\n                    type: 'string',\n                  },\n                },\n                type: 'object',\n              },\n              {\n                enum: [\n                  'any',\n                ],\n                type: 'string',\n              },\n            ],\n          },\n        },\n        type: 'object',\n      },\n    ],\n    type: 'layout',\n  },\n});\n"],"mappings":"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"}