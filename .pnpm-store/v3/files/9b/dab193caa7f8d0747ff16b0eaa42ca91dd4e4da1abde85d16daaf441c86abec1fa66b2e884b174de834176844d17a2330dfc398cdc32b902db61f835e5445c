import { RuleStorage } from '../../filterlist/rule-storage';
import { Request } from '../../request';
import { NetworkRule } from '../../rules/network-rule';
import { ILookupTable } from './lookup-table';
/**
 * Look up table with underlying prefix tree
 */
export declare class TrieLookupTable implements ILookupTable {
    /**
     * Count of rules added to this lookup table.
     */
    private rulesCount;
    /**
     * Storage for the network filtering rules
     */
    private readonly ruleStorage;
    /**
     * Trie that stores rules' shortcuts.
     */
    private readonly trie;
    /**
     * Creates a new instance of the TrieLookupTable.
     *
     * @param storage rules storage. We store "rule indexes" in the lookup table which
     * can be used to retrieve the full rules from the storage.
     */
    constructor(storage: RuleStorage);
    /**
     * Finds all matching rules from the shortcuts lookup table
     *
     * @param request to check
     * @return array of matching rules
     */
    matchAll(request: Request): NetworkRule[];
    /**
     * Tries to add the rule to the lookup table.
     * returns true if it was added
     *
     * @param rule to add
     * @param storageIdx index
     * @return {boolean} true if the rule been added
     */
    addRule(rule: NetworkRule, storageIdx: number): boolean;
    /**
     * @return total rules count
     */
    getRulesCount(): number;
    /**
     * For specified request finds matching rules from rules indexes array
     *
     * @param request
     * @param rulesIndexes
     */
    private matchRules;
    /**
     * Traverses trie
     *
     * @param request
     */
    private traverse;
    /**
     * Checks if the rule potentially matches too many URLs.
     * We'd better use another type of lookup table for this kind of rules.
     *
     * @param shortcut to check
     * @return check result
     */
    private static isAnyURLShortcut;
}
